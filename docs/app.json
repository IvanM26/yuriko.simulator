[{"name":"server.R","content":"function(input, output, session) {\r\n\r\n  w <- waiter::Waiter$new()\r\n  \r\n  decklist <- shiny::eventReactive(input$upload_decklist, {\r\n    w$show()\r\n    out <- process_card_data(input$upload_decklist$datapath, use_httr = FALSE, waiter = w)\r\n    waiter::waiter_hide()\r\n    out\r\n  })\r\n  \r\n  output$table_decklist <- reactable::renderReactable({\r\n    decklist() |> \r\n      dplyr::select(card_name) |> \r\n      reactable::reactable()\r\n  })\r\n  \r\n  shiny::observeEvent(decklist(), {\r\n    shiny::updateSelectInput(session = session, inputId = \"card1\", choices = decklist()$card_name, selected = decklist()$card_name[[1]])\r\n    shiny::updateSelectInput(session = session, inputId = \"card2\", choices = decklist()$card_name, selected = decklist()$card_name[[2]])\r\n    shiny::updateSelectInput(session = session, inputId = \"card3\", choices = decklist()$card_name, selected = decklist()$card_name[[3]])\r\n    shiny::updateSelectInput(session = session, inputId = \"card4\", choices = decklist()$card_name, selected = decklist()$card_name[[4]])\r\n    shiny::updateSelectInput(session = session, inputId = \"card5\", choices = decklist()$card_name, selected = decklist()$card_name[[5]])\r\n    shiny::updateSelectInput(session = session, inputId = \"card6\", choices = decklist()$card_name, selected = decklist()$card_name[[6]])\r\n    shiny::updateSelectInput(session = session, inputId = \"card7\", choices = decklist()$card_name, selected = decklist()$card_name[[7]])\r\n  })\r\n  \r\n  shiny::observeEvent(input$random_hand, {\r\n    random_hand <- draw_seven(decklist())\r\n    shiny::updateSelectInput(session = session, inputId = \"card1\", selected = random_hand$card_name[[1]])\r\n    shiny::updateSelectInput(session = session, inputId = \"card3\", selected = random_hand$card_name[[2]])\r\n    shiny::updateSelectInput(session = session, inputId = \"card4\", selected = random_hand$card_name[[3]])\r\n    shiny::updateSelectInput(session = session, inputId = \"card2\", selected = random_hand$card_name[[4]])\r\n    shiny::updateSelectInput(session = session, inputId = \"card5\", selected = random_hand$card_name[[5]])\r\n    shiny::updateSelectInput(session = session, inputId = \"card6\", selected = random_hand$card_name[[6]])\r\n    shiny::updateSelectInput(session = session, inputId = \"card7\", selected = random_hand$card_name[[7]])\r\n  })\r\n  \r\n  output$image1 <- shiny::renderUI({\r\n    img_src <- decklist() |> dplyr::filter(card_name == input$card1) |> dplyr::pull(img_src)\r\n    shiny::tags$img(src = img_src, alt = \"card1\", crossorigin = \"anonymous\", height = 300)\r\n  })\r\n\r\n  output$image2 <- shiny::renderUI({\r\n    img_src <- decklist() |> dplyr::filter(card_name == input$card2) |> dplyr::pull(img_src)\r\n    shiny::tags$img(src = img_src, alt = \"card2\", crossorigin = \"anonymous\", height = 300)\r\n  })\r\n\r\n  output$image3 <- shiny::renderUI({\r\n    img_src <- decklist() |> dplyr::filter(card_name == input$card3) |> dplyr::pull(img_src)\r\n    shiny::tags$img(src = img_src, alt = \"card3\", crossorigin = \"anonymous\", height = 300)\r\n  })\r\n\r\n  output$image4 <- shiny::renderUI({\r\n    img_src <- decklist() |> dplyr::filter(card_name == input$card4) |> dplyr::pull(img_src)\r\n    shiny::tags$img(src = img_src, alt = \"card4\", crossorigin = \"anonymous\", height = 300)\r\n  })\r\n\r\n  output$image5 <- shiny::renderUI({\r\n    img_src <- decklist() |> dplyr::filter(card_name == input$card5) |> dplyr::pull(img_src)\r\n    shiny::tags$img(src = img_src, alt = \"card5\", crossorigin = \"anonymous\", height = 300)\r\n  })\r\n\r\n  output$image6 <- shiny::renderUI({\r\n    img_src <- decklist() |> dplyr::filter(card_name == input$card6) |> dplyr::pull(img_src)\r\n    shiny::tags$img(src = img_src, alt = \"card6\", crossorigin = \"anonymous\", height = 300)\r\n  })\r\n\r\n  output$image7 <- shiny::renderUI({\r\n    img_src <- decklist() |> dplyr::filter(card_name == input$card7) |> dplyr::pull(img_src)\r\n    shiny::tags$img(src = img_src, alt = \"card7\", crossorigin = \"anonymous\", height = 300)\r\n  })\r\n  \r\n  test_hand <- shiny::reactive({\r\n    decklist() |> \r\n      dplyr::filter(card_name %in% c(input$card1, input$card2, input$card3, input$card4, input$card5, input$card6, input$card7))\r\n  })\r\n  \r\n  output$test_hand_output <- shiny::renderUI({\r\n    if (is_yuriko_on_T2(test_hand())) {\r\n      shiny::div(\r\n        class = \"alert alert-success\",\r\n        \"Yuriko triggers on turn two\"\r\n      )\r\n    } else {\r\n      shiny::div(\r\n        class = \"alert alert-danger\",\r\n        \"Yuriko does not trigger on turn two\"\r\n      )\r\n    }\r\n  })\r\n  \r\n}","type":"text"},{"name":"ui.R","content":"bslib::page_navbar(\r\n  title = \"Mulligan Simulator\",\r\n  bslib::nav_panel(\r\n    title = \"Your Decklist\",\r\n    waiter::useWaiter(),\r\n    bslib::layout_sidebar(\r\n      sidebar = bslib::sidebar(\r\n        width = 400,\r\n        shiny::fileInput(\r\n          inputId = \"upload_decklist\",\r\n          label = \"Upload Decklist\"\r\n        )\r\n      ),\r\n      bslib::card(\r\n        bslib::card_header(\"Decklist\"),\r\n        reactable::reactableOutput(outputId = \"table_decklist\")\r\n      )\r\n    )\r\n  ),\r\n  bslib::nav_panel(\r\n    title = \"Simulate\"\r\n  ),\r\n  bslib::nav_panel(\r\n    title = \"Test Hand\",\r\n    bslib::layout_sidebar(\r\n      sidebar = bslib::sidebar(\r\n        width = 400,\r\n        shiny::actionButton(\r\n          inputId = \"random_hand\",\r\n          label = \"Draw Random Hand\"\r\n        ),\r\n        \"Cards in Hand:\",\r\n        shiny::selectInput(\r\n          inputId = \"card1\",\r\n          label = NULL,\r\n          choices = NULL\r\n        ),\r\n        shiny::selectInput(\r\n          inputId = \"card2\",\r\n          label = NULL,\r\n          choices = NULL\r\n        ),\r\n        shiny::selectInput(\r\n          inputId = \"card3\",\r\n          label = NULL,\r\n          choices = NULL\r\n        ),\r\n        shiny::selectInput(\r\n          inputId = \"card4\",\r\n          label = NULL,\r\n          choices = NULL\r\n        ),\r\n        shiny::selectInput(\r\n          inputId = \"card5\",\r\n          label = NULL,\r\n          choices = NULL\r\n        ),\r\n        shiny::selectInput(\r\n          inputId = \"card6\",\r\n          label = NULL,\r\n          choices = NULL\r\n        ),\r\n        shiny::selectInput(\r\n          inputId = \"card7\",\r\n          label = NULL,\r\n          choices = NULL\r\n        )\r\n      ),\r\n      bslib::card(\r\n        bslib::card_header(\"Your Hand\"),\r\n        bslib::layout_columns(\r\n          shiny::uiOutput(\"image1\", inline = TRUE),\r\n          shiny::uiOutput(\"image2\", inline = TRUE),\r\n          shiny::uiOutput(\"image3\", inline = TRUE),\r\n          shiny::uiOutput(\"image4\", inline = TRUE),\r\n          shiny::uiOutput(\"image5\", inline = TRUE),\r\n          shiny::uiOutput(\"image6\", inline = TRUE),\r\n          shiny::uiOutput(\"image7\", inline = TRUE)\r\n        ),\r\n        shiny::uiOutput(\"test_hand_output\")\r\n      )\r\n    )\r\n  ),\r\n  bslib::nav_panel(\r\n    title = \"About\"\r\n  )\r\n)\r\n","type":"text"},{"name":"global.R","content":"\r\n# ---- Start of hand_produces_1ub_T1.R ----\r\n\r\nhand_produces_1ub_T1 <- function(hand_metrics) {\r\n  if (hand_metrics$dark_ritual){\r\n    if (hand_metrics$lotus_petal){\r\n      if (hand_metrics$n_color_lands + hand_metrics$n_mdfc_lands >= 1) return(TRUE)\r\n      if (hand_metrics$mox_diamond & hand_metrics$n_lands >= 1) return(TRUE)\r\n      if (hand_metrics$chrome_mox & hand_metrics$n_cards_u + hand_metrics$n_cards_b >= 2) return(TRUE)\r\n    }\r\n    if (hand_metrics$chrome_mox){\r\n      if (hand_metrics$n_lands_b + hand_metrics$n_mdfc_lands_b >= 1){\r\n        if (hand_metrics$n_cards_u >= 1) return(TRUE)\r\n      }\r\n      if (hand_metrics$n_lands_u + hand_metrics$n_mdfc_lands_u >= 1){\r\n        if (hand_metrics$n_cards_b >= 2) return(TRUE)\r\n      }\r\n      if (hand_metrics$mox_diamond){\r\n        if (hand_metrics$n_lands >= 1 & hand_metrics$n_cards_u + hand_metrics$n_cards_b >= 2) return(TRUE)\r\n      }\r\n    }\r\n  }\r\n  \r\n  if (hand_metrics$lotus_petal){\r\n    if (hand_metrics$chrome_mox){\r\n      if (hand_metrics$n_lands >= 1 & hand_metrics$n_cards_b + hand_metrics$n_cards_u >= 1) return(TRUE)\r\n      if (hand_metrics$n_mdfc_lands >= 1 & hand_metrics$n_cards_b + hand_metrics$n_cards_u >= 2) return(TRUE)\r\n    }\r\n    if (hand_metrics$mox_diamond){\r\n      if (hand_metrics$n_lands >= 2) return(TRUE)\r\n      if (hand_metrics$n_lands == 1 & hand_metrics$mana_crypt) return(TRUE)\r\n    }\r\n  }\r\n  \r\n  if (hand_metrics$chrome_mox){\r\n    if (hand_metrics$n_lands >= 2){\r\n      if (hand_metrics$mox_diamond){\r\n        if (hand_metrics$n_cards_b + hand_metrics$n_cards_u >= 1) return(TRUE)\r\n      }\r\n      if (hand_metrics$mana_crypt){\r\n        if (hand_metrics$n_lands_b >= 1 & hand_metrics$n_cards_u >= 1) return(TRUE)\r\n        if (hand_metrics$n_lands_u >= 1 & hand_metrics$n_cards_b >= 1) return(TRUE)\r\n      }\r\n    }\r\n    if (hand_metrics$n_lands == 1){\r\n      if (hand_metrics$mox_diamond){\r\n        if (hand_metrics$n_mdfc_lands_b >= 1 & hand_metrics$n_cards_b + hand_metrics$n_cards_u >= 2) return(TRUE)\r\n        if (hand_metrics$n_mdfc_lands_u >= 1 & hand_metrics$n_cards_b + hand_metrics$n_cards_u >= 2) return(TRUE)\r\n        if (hand_metrics$mana_crypt & hand_metrics$n_cards_b + hand_metrics$n_cards_u >= 1) return(TRUE)\r\n      }\r\n      if (hand_metrics$mana_crypt){\r\n        if (hand_metrics$n_lands_b >= 1 & hand_metrics$n_cards_u >= 1) return(TRUE)\r\n        if (hand_metrics$n_lands_u >= 1 & hand_metrics$n_cards_b >= 1) return(TRUE)\r\n      }\r\n    }\r\n    if (hand_metrics$n_lands == 0){\r\n      if (hand_metrics$n_mdfc_lands >= 1){\r\n        if (hand_metrics$mana_crypt){\r\n          if (hand_metrics$n_mdfc_lands_b >= 1 & hand_metrics$n_cards_u >= 1) return(TRUE)\r\n          if (hand_metrics$n_mdfc_lands_u >= 1 & hand_metrics$n_cards_b >= 1) return(TRUE)\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  if (hand_metrics$mana_crypt){\r\n    if (hand_metrics$lotus_petal){\r\n      if (hand_metrics$n_color_lands >= 1) return(TRUE)\r\n      if (hand_metrics$chrome_mox & hand_metrics$n_cards_b + hand_metrics$n_cards_u >= 1) return(TRUE)\r\n    }\r\n    if (hand_metrics$mox_diamond){\r\n      if (hand_metrics$n_lands >= 2 & hand_metrics$n_color_lands >= 1) return(TRUE)\r\n    }\r\n  }\r\n  \r\n  return(FALSE)\r\n}\r\n\r\n# ---- End of hand_produces_1ub_T1.R ----\r\n\r\n\r\n# ---- Start of hand_produces_ub.R ----\r\n\r\nhand_produces_ub <- function(hand_metrics, use_lotus_petal = TRUE){\r\n  if (hand_metrics$n_lands >= 2){\r\n    \r\n    if (hand_metrics$n_color_lands >= 2){\r\n      if (hand_metrics$mox_diamond) return(TRUE)\r\n      if (use_lotus_petal & hand_metrics$lotus_petal) return(TRUE)\r\n      if ((hand_metrics$n_lands_u >= 1) & (hand_metrics$n_lands_b >= 1)) return(TRUE)\r\n      if (hand_metrics$n_lands_b == 0){\r\n        if (hand_metrics$chrome_mox & (hand_metrics$n_cards_b >= 1)) return(TRUE)\r\n        if (hand_metrics$n_mdfc_lands_b >= 1) return(TRUE)\r\n      }\r\n      if (hand_metrics$n_lands_u == 0){\r\n        if (hand_metrics$chrome_mox & (hand_metrics$n_cards_u >= 1)) return(TRUE)\r\n        if (hand_metrics$n_mdfc_lands_u >= 1) return(TRUE)\r\n      }\r\n    }\r\n    \r\n    if (hand_metrics$n_color_lands == 1){\r\n      if (hand_metrics$mox_diamond) return(TRUE)\r\n      if (use_lotus_petal & hand_metrics$lotus_petal) return(TRUE)\r\n      if (hand_metrics$n_lands_u == 1 & hand_metrics$n_lands_b == 1 & hand_metrics$chrome_mox & (hand_metrics$n_cards_u >= 1 | hand_metrics$n_cards_b >= 1)) return(TRUE)\r\n      if (hand_metrics$n_lands_b == 0){\r\n        if (hand_metrics$chrome_mox & hand_metrics$n_cards_b >= 1) return(TRUE)\r\n        if (hand_metrics$n_mdfc_lands_b >= 1) return(TRUE)\r\n      }\r\n      if (hand_metrics$n_lands_u == 0){\r\n        if (hand_metrics$chrome_mox & hand_metrics$n_cards_u >= 1) return(TRUE)\r\n        if (hand_metrics$n_mdfc_lands_u >= 1) return(TRUE)\r\n      }\r\n    }\r\n    \r\n    if (hand_metrics$n_color_lands == 0){\r\n      if (hand_metrics$n_mdfc_lands == 0){\r\n        if (hand_metrics$mox_diamond & hand_metrics$chrome_mox & (hand_metrics$n_cards_u >= 1 | hand_metrics$n_cards_b >= 1)) return(TRUE)\r\n      }\r\n      if (hand_metrics$n_mdfc_lands == 1){\r\n        if (hand_metrics$mox_diamond) return(TRUE)\r\n        if (use_lotus_petal & hand_metrics$lotus_petal) return(TRUE)\r\n        if (hand_metrics$n_mdfc_lands_u >= 1 & hand_metrics$chrome_mox & hand_metrics$n_cards_b >= 1) return(TRUE)\r\n        if (hand_metrics$n_mdfc_lands_b >= 1 & hand_metrics$chrome_mox & hand_metrics$n_cards_u >= 1) return(TRUE)\r\n      }\r\n      if (hand_metrics$n_mdfc_lands == 2){\r\n        if (hand_metrics$n_mdfc_lands_u >= 1 & hand_metrics$n_mdfc_lands_b >= 1) return(TRUE)\r\n      }\r\n    }\r\n  }\r\n  \r\n  if (hand_metrics$n_lands == 1){\r\n    \r\n    if (hand_metrics$n_color_lands == 1){\r\n      if (use_lotus_petal & hand_metrics$lotus_petal) return(TRUE)\r\n      if (hand_metrics$n_lands_u == 1 & hand_metrics$n_lands_b == 1 & hand_metrics$n_mdfc_lands >= 1) return(TRUE)\r\n      if (hand_metrics$n_lands_b == 1){\r\n        if (hand_metrics$chrome_mox){\r\n          if (hand_metrics$n_cards_u >= 1) return(TRUE)\r\n          if (hand_metrics$n_cards_b >= 1 & hand_metrics$mox_diamond) return(TRUE)\r\n        }\r\n        \r\n        if (hand_metrics$n_mdfc_lands_u >= 1) return(TRUE)\r\n        if (hand_metrics$mox_diamond & hand_metrics$n_mdfc_lands >= 1) return(TRUE)\r\n      }\r\n      if (hand_metrics$n_lands_u == 1){\r\n        if (hand_metrics$chrome_mox){\r\n          if (hand_metrics$n_cards_b >= 1) return(TRUE)\r\n          if (hand_metrics$n_cards_u >= 1 & hand_metrics$mox_diamond) return(TRUE)\r\n        }\r\n        \r\n        if (hand_metrics$n_mdfc_lands_b >= 1) return(TRUE)\r\n        if (hand_metrics$mox_diamond & hand_metrics$n_mdfc_lands >= 1) return(TRUE)\r\n      }\r\n    }\r\n    \r\n    if (hand_metrics$n_color_lands == 0){\r\n      if (hand_metrics$n_mdfc_lands_u >= 1 & hand_metrics$n_mdfc_lands_b >= 1) return(TRUE)\r\n      if (hand_metrics$mox_diamond){\r\n        if (hand_metrics$chrome_mox & (hand_metrics$n_cards_u >= 1 | hand_metrics$n_cards_b >= 1)) return(TRUE)\r\n        if (hand_metrics$n_mdfc_lands >= 1) return(TRUE)\r\n      }\r\n      if (hand_metrics$n_mdfc_lands_u >= 1 & hand_metrics$chrome_mox & hand_metrics$n_cards_b >= 1) return(TRUE)\r\n      if (hand_metrics$n_mdfc_lands_b >= 1 & hand_metrics$chrome_mox & hand_metrics$n_cards_u >= 1) return(TRUE)\r\n      if (use_lotus_petal & hand_metrics$lotus_petal & hand_metrics$n_mdfc_lands >= 1) return(TRUE)\r\n    }\r\n  }\r\n  \r\n  if (hand_metrics$n_lands == 0){\r\n    if (use_lotus_petal & hand_metrics$lotus_petal & hand_metrics$chrome_mox & (hand_metrics$n_cards_u >= 1 | hand_metrics$n_cards_b >= 1)) return(TRUE)\r\n    if (use_lotus_petal & hand_metrics$lotus_petal & hand_metrics$n_mdfc_lands >= 1) return(TRUE)\r\n    if (hand_metrics$n_mdfc_lands_u >= 1 & hand_metrics$chrome_mox & hand_metrics$n_cards_b >= 1) return(TRUE)\r\n    if (hand_metrics$n_mdfc_lands_b >= 1 & hand_metrics$chrome_mox & hand_metrics$n_cards_u >= 1) return(TRUE)\r\n  }\r\n  \r\n  return(FALSE)\r\n}\r\n\r\n# ---- End of hand_produces_ub.R ----\r\n\r\n\r\n# ---- Start of hand_produces_ub_and_three_mana_T1.R ----\r\n\r\nhand_produces_ub_and_three_mana_T1 <- function(hand_metrics, constraint){\r\n  \r\n  if (constraint == \"U ON T1\"){\r\n    \r\n    n_lands_constraint_color     <- hand_metrics$n_lands_u\r\n    n_mdfc_lands_constraint_color <- hand_metrics$n_mdfc_lands_u\r\n    n_cards_constraint_color     <- hand_metrics$n_cards_u\r\n    \r\n    n_lands_other_color      <- hand_metrics$n_lands_b\r\n    n_mdfc_lands_other_color <- hand_metrics$n_mdfc_lands_b\r\n    n_cards_other_color      <- hand_metrics$n_cards_b\r\n    \r\n    \r\n  } else if (constraint == \"B ON T1\"){\r\n    \r\n    n_lands_constraint_color     <- hand_metrics$n_lands_b\r\n    n_mdfc_lands_constraint_color <- hand_metrics$n_mdfc_lands_b\r\n    n_cards_constraint_color     <- hand_metrics$n_cards_b\r\n    \r\n    n_lands_other_color      <- hand_metrics$n_lands_u\r\n    n_mdfc_lands_other_color <- hand_metrics$n_mdfc_lands_u\r\n    n_cards_other_color      <- hand_metrics$n_cards_u\r\n    \r\n  }\r\n  \r\n  if (hand_metrics$lotus_petal){\r\n    if (hand_metrics$chrome_mox){\r\n      if (n_cards_constraint_color >= 2){\r\n        if (hand_produces_ub(hand_metrics, use_lotus_petal = FALSE)) return(TRUE)\r\n      }\r\n      \r\n      if (n_cards_other_color >= 1){\r\n        if (hand_produces_ub_with_constraint(hand_metrics, constraint, use_lotus_petal = FALSE)) return(TRUE)\r\n      }\r\n      \r\n    }\r\n    \r\n    if (hand_metrics$mox_diamond){\r\n      if (hand_metrics$n_lands >= 2){\r\n        if (hand_metrics$n_color_lands >= 1) return(TRUE)\r\n        if (hand_metrics$n_mdfc_lands >= 1) return(TRUE)\r\n      }\r\n      if (hand_metrics$n_lands == 1){\r\n        if (hand_metrics$n_mdfc_lands >= 1) return(TRUE)\r\n      }\r\n    }\r\n  }\r\n  \r\n  if (hand_metrics$chrome_mox){\r\n    if (n_cards_constraint_color >= 2 | n_cards_other_color >= 1){\r\n      if (hand_metrics$mox_diamond){\r\n        if (hand_metrics$n_lands >= 2) return(TRUE)\r\n        if (hand_metrics$n_lands == 1 & hand_metrics$n_mdfc_lands >= 1) return(TRUE) \r\n      } \r\n    }\r\n  }\r\n  \r\n  if (hand_metrics$dark_ritual){\r\n    if (hand_produces_ub_and_two_mana_T1(hand_metrics, \"B ON T1\")) return(TRUE)\r\n  }\r\n\r\n  return(FALSE)\r\n}\r\n\r\n# ---- End of hand_produces_ub_and_three_mana_T1.R ----\r\n\r\n\r\n# ---- Start of hand_produces_ub_and_two_mana_T1.R ----\r\n\r\nhand_produces_ub_and_two_mana_T1 <- function(hand_metrics, constraint){\r\n  \r\n  if (constraint %in% c(\"U ON T1\", \"UU ON T1\")){\r\n    \r\n    n_lands_constraint_color     <- hand_metrics$n_lands_u\r\n    n_mdfc_lands_constraint_color <- hand_metrics$n_mdfc_lands_u\r\n    n_cards_constraint_color     <- hand_metrics$n_cards_u\r\n    \r\n    n_lands_other_color      <- hand_metrics$n_lands_b\r\n    n_mdfc_lands_other_color <- hand_metrics$n_mdfc_lands_b\r\n    n_cards_other_color      <- hand_metrics$n_cards_b\r\n    \r\n    \r\n  } else if (constraint %in% c(\"B ON T1\", \"BB ON T1\")){\r\n    \r\n    n_lands_constraint_color     <- hand_metrics$n_lands_b\r\n    n_mdfc_lands_constraint_color <- hand_metrics$n_mdfc_lands_b\r\n    n_cards_constraint_color     <- hand_metrics$n_cards_b\r\n    \r\n    n_lands_other_color      <- hand_metrics$n_lands_u\r\n    n_mdfc_lands_other_color <- hand_metrics$n_mdfc_lands_u\r\n    n_cards_other_color      <- hand_metrics$n_cards_u\r\n    \r\n  }\r\n  \r\n  if (hand_metrics$lotus_petal){\r\n    if (hand_produces_ub(hand_metrics, use_lotus_petal = FALSE)) return(TRUE)\r\n  }\r\n  \r\n  if (hand_metrics$chrome_mox){\r\n    if (n_cards_constraint_color >= 2){\r\n      if (hand_produces_ub(hand_metrics, use_lotus_petal = FALSE)) return(TRUE)\r\n    }\r\n    \r\n    if (n_cards_other_color >= 1 & !(constraint %in% c(\"UU ON T1\", \"BB ON T1\"))){\r\n      if (hand_produces_ub_with_constraint(hand_metrics, constraint, use_lotus_petal = FALSE)) return(TRUE)\r\n    }\r\n    \r\n  }\r\n\r\n  if (hand_metrics$mox_diamond){\r\n    if (hand_metrics$n_lands >= 2){\r\n      if (hand_metrics$n_color_lands >= 1) return(TRUE)\r\n      if (hand_metrics$n_mdfc_lands >= 1) return(TRUE)\r\n    }\r\n    if (hand_metrics$n_lands == 1){\r\n      if (constraint %in% c(\"U ON T1\", \"B ON T1\")) {\r\n        if (hand_metrics$n_mdfc_lands >= 1) return(TRUE)\r\n      }\r\n      if (constraint %in% c(\"UU ON T1\", \"BB ON T1\")) {\r\n        if (n_mdfc_lands_constraint_color >= 1) return(TRUE)\r\n      }\r\n    }\r\n  }\r\n  \r\n  return(FALSE)\r\n  \r\n}\r\n\r\n# ---- End of hand_produces_ub_and_two_mana_T1.R ----\r\n\r\n\r\n# ---- Start of hand_produces_ub_with_constraint.R ----\r\n\r\nhand_produces_ub_with_constraint <- function(hand_metrics, constraint, use_lotus_petal = TRUE, mdfc_enabler = FALSE){\r\n  if (constraint == \"U ON T1\"){\r\n    \r\n    n_lands_constraint_color     <- hand_metrics$n_lands_u\r\n    n_mdfc_lands_constraint_color <- hand_metrics$n_mdfc_lands_u\r\n    n_cards_constraint_color     <- hand_metrics$n_cards_u\r\n\r\n    n_lands_other_color      <- hand_metrics$n_lands_b\r\n    n_mdfc_lands_other_color <- hand_metrics$n_mdfc_lands_b\r\n    n_cards_other_color      <- hand_metrics$n_cards_b\r\n\r\n  } else if (constraint == \"B ON T1\"){\r\n    \r\n    n_lands_constraint_color     <- hand_metrics$n_lands_b\r\n    n_mdfc_lands_constraint_color <- hand_metrics$n_mdfc_lands_b\r\n    n_cards_constraint_color     <- hand_metrics$n_cards_b\r\n\r\n    n_lands_other_color      <- hand_metrics$n_lands_u\r\n    n_mdfc_lands_other_color <- hand_metrics$n_mdfc_lands_u\r\n    n_cards_other_color      <- hand_metrics$n_cards_u\r\n\r\n  }\r\n  \r\n  if (hand_metrics$n_lands >= 2){\r\n    \r\n    if (hand_metrics$n_color_lands >= 2){\r\n      if (hand_metrics$mox_diamond) return(TRUE)\r\n      if (use_lotus_petal & hand_metrics$lotus_petal){\r\n        if (n_lands_constraint_color     >= 1) return(TRUE)\r\n        if (n_mdfc_lands_constraint_color >= 1) return(TRUE)\r\n      }\r\n      if ((n_lands_constraint_color >= 1) & (n_lands_other_color >= 1)) return(TRUE)\r\n      if (n_lands_other_color == 0){\r\n        if (hand_metrics$chrome_mox & (n_cards_other_color >= 1)) return(TRUE)\r\n        if (n_mdfc_lands_other_color >= 1) return(TRUE)\r\n      }\r\n      if (n_lands_constraint_color == 0){\r\n        if (hand_metrics$chrome_mox & (n_cards_constraint_color >= 2)) return(TRUE)\r\n        if (n_mdfc_lands_constraint_color >= 1) return(TRUE)\r\n      }\r\n    }\r\n    \r\n    if (hand_metrics$n_color_lands == 1){\r\n      if (hand_metrics$mox_diamond) return(TRUE)\r\n      if (use_lotus_petal & hand_metrics$lotus_petal){\r\n        if (n_lands_constraint_color >= 1) return(TRUE)\r\n        if (n_mdfc_lands_constraint_color >= 1) return(TRUE)\r\n      }\r\n      if (n_lands_constraint_color == 1 & n_lands_other_color == 1 & hand_metrics$chrome_mox & (n_cards_constraint_color >= 2 | n_cards_other_color >= 1)) return(TRUE)\r\n      if (n_lands_other_color == 0){\r\n        if (hand_metrics$chrome_mox & n_cards_other_color >= 1) return(TRUE)\r\n        if (n_mdfc_lands_other_color >= 1) return(TRUE)\r\n      }\r\n      if (n_lands_constraint_color == 0){\r\n        if (hand_metrics$chrome_mox & n_cards_constraint_color >= 2) return(TRUE)\r\n        if (n_mdfc_lands_constraint_color >= 1) return(TRUE)\r\n      }\r\n    }\r\n    \r\n    if (hand_metrics$n_color_lands == 0){\r\n      if (hand_metrics$n_mdfc_lands == 0){\r\n        if (hand_metrics$mox_diamond & hand_metrics$chrome_mox & (n_cards_constraint_color >= 2 | n_cards_other_color >= 1)) return(TRUE)\r\n      }\r\n      if (hand_metrics$n_mdfc_lands == 1){\r\n        if (hand_metrics$mox_diamond) return(TRUE)\r\n        if (use_lotus_petal & hand_metrics$lotus_petal & n_mdfc_lands_constraint_color >= 1) return(TRUE)\r\n        if (n_mdfc_lands_constraint_color >= 1 & hand_metrics$chrome_mox & n_cards_other_color >= 1) return(TRUE)\r\n        if (n_mdfc_lands_other_color >= 1 & hand_metrics$chrome_mox & n_cards_constraint_color >= 2) return(TRUE)\r\n      }\r\n      if (hand_metrics$n_mdfc_lands == 2){\r\n        if (n_mdfc_lands_constraint_color >= 1 & n_mdfc_lands_other_color >= 1) return(TRUE)\r\n      }\r\n    }\r\n  }\r\n  \r\n  if (hand_metrics$n_lands == 1){\r\n\r\n    if (hand_metrics$n_color_lands == 1){\r\n      if (use_lotus_petal & hand_metrics$lotus_petal){\r\n        if (n_lands_constraint_color >= 1) return(TRUE)\r\n        if (n_mdfc_lands_constraint_color >= 1) return(TRUE)\r\n      }\r\n      if (n_lands_constraint_color == 1 & n_lands_other_color == 1 & hand_metrics$n_mdfc_lands >= 1) return(TRUE)\r\n      if (n_lands_other_color == 1){\r\n        if (hand_metrics$chrome_mox & n_cards_constraint_color >= 2) return(TRUE)\r\n        if (!mdfc_enabler & n_mdfc_lands_constraint_color >= 1) return(TRUE)\r\n        if (mdfc_enabler & n_mdfc_lands_constraint_color >= 2) return(TRUE)\r\n        if (hand_metrics$mox_diamond & hand_metrics$n_mdfc_lands >= 1) return(TRUE)\r\n      }\r\n      if (n_lands_constraint_color == 1){\r\n        if (hand_metrics$chrome_mox & n_cards_other_color >= 1) return(TRUE)\r\n        if (n_mdfc_lands_other_color >= 1) return(TRUE)\r\n        if (hand_metrics$mox_diamond & hand_metrics$n_mdfc_lands >= 1) return(TRUE)\r\n      }\r\n    }\r\n    \r\n    if (hand_metrics$n_color_lands == 0){\r\n      if (n_mdfc_lands_constraint_color >= 1 & n_mdfc_lands_other_color >= 1) return(TRUE)\r\n      if (hand_metrics$mox_diamond){\r\n        if (hand_metrics$chrome_mox & (n_cards_constraint_color >= 2 | n_cards_other_color >= 1)) return(TRUE)\r\n        if (hand_metrics$n_mdfc_lands >= 1) return(TRUE)\r\n      }\r\n      if (n_mdfc_lands_constraint_color >= 1 & hand_metrics$chrome_mox & n_cards_other_color >= 1) return(TRUE)\r\n      if (n_mdfc_lands_other_color >= 1 & hand_metrics$chrome_mox & n_cards_constraint_color >= 2) return(TRUE)\r\n      if (use_lotus_petal & hand_metrics$lotus_petal & n_mdfc_lands_constraint_color >= 1) return(TRUE)\r\n    }\r\n  }\r\n  \r\n  if (hand_metrics$n_lands == 0){\r\n    if (use_lotus_petal & hand_metrics$lotus_petal & hand_metrics$chrome_mox & (n_cards_constraint_color >= 2 | n_cards_other_color >= 1)) return(TRUE)\r\n    if (use_lotus_petal & hand_metrics$lotus_petal & n_mdfc_lands_constraint_color >= 1) return(TRUE)\r\n    if (n_mdfc_lands_constraint_color >= 1 & hand_metrics$chrome_mox & n_cards_other_color >= 1) return(TRUE)\r\n    if (n_mdfc_lands_other_color >= 1 & hand_metrics$chrome_mox & n_cards_constraint_color >= 2) return(TRUE)\r\n  }\r\n  \r\n  return(FALSE)\r\n}\r\n\r\n# ---- End of hand_produces_ub_with_constraint.R ----\r\n\r\n\r\n# ---- Start of is_yuriko_on_T2.R ----\r\n\r\n#' @export\r\nis_yuriko_on_T2 <- function(opening_hand){\r\n\r\n  # TODO: Add parameter to indicate whether we are playing first\r\n  # TODO: Add logic to account for Gemstone Caverns when we are not playing first\r\n\r\n  hand_metrics <- summarise_hand(opening_hand)\r\n\r\n  if (hand_metrics$n_enablers >= 1){\r\n    \r\n    # ENABLER 0 ####\r\n    if (hand_metrics$n_enablers_0 >= 1){\r\n      if (hand_produces_ub(hand_metrics)) return(TRUE)\r\n    }\r\n    \r\n    # ENABLER 1 ####\r\n    if (hand_metrics$n_enablers_1 >= 1){\r\n      \r\n      # > COLORLESS ####\r\n      if (hand_metrics$n_enablers_c >= 1){\r\n        if (hand_produces_ub(hand_metrics)) return(TRUE)\r\n      }\r\n      \r\n      # > BLUE ####\r\n      if (hand_metrics$n_enablers_u >= 1){\r\n        if (hand_produces_ub_with_constraint(hand_metrics, \"U ON T1\")) return(TRUE)\r\n      }\r\n      \r\n      # > BLACK ####\r\n      if (hand_metrics$n_enablers_b >= 1){\r\n        if (hand_produces_ub_with_constraint(hand_metrics, \"B ON T1\")) return(TRUE)\r\n      }\r\n      \r\n    }\r\n    \r\n    # ENABLER 2 ####\r\n    if (hand_metrics$n_enablers_2 >= 1){\r\n      \r\n      # > 1U ####\r\n      if (hand_metrics$n_enablers_1u >= 1){\r\n        if (hand_metrics$mana_crypt){\r\n          if (hand_produces_ub_with_constraint(hand_metrics, \"U ON T1\")) return(TRUE)\r\n        }\r\n        \r\n        if (hand_produces_ub_and_two_mana_T1(hand_metrics, \"U ON T1\")) return(TRUE)\r\n        \r\n      }\r\n      \r\n      # > 1B ####\r\n      if (hand_metrics$n_enablers_1b >= 1){\r\n        if (hand_metrics$mana_crypt){\r\n          if (hand_produces_ub_with_constraint(hand_metrics, \"B ON T1\")) return(TRUE)\r\n        }\r\n        \r\n        if (hand_produces_ub_and_two_mana_T1(hand_metrics, \"B ON T1\")) return(TRUE)\r\n        \r\n        if (hand_metrics$dark_ritual){\r\n          if (hand_produces_ub_with_constraint(hand_metrics, \"B ON T1\")) return(TRUE)\r\n        }\r\n      }\r\n      \r\n      # > UU ####\r\n      if (hand_metrics$n_enablers_uu >= 1){\r\n        if (hand_produces_ub_and_two_mana_T1(hand_metrics, \"UU ON T1\")) return(TRUE)\r\n      }\r\n      \r\n      # > BB ####\r\n      if (hand_metrics$n_enablers_bb >= 1){\r\n        if (hand_produces_ub_and_two_mana_T1(hand_metrics, \"BB ON T1\")) return(TRUE)\r\n        \r\n        if (hand_metrics$dark_ritual){\r\n          if (hand_produces_ub_with_constraint(hand_metrics, \"B ON T1\")) return(TRUE)\r\n        }\r\n      }\r\n      \r\n      # > UB ####\r\n      if (hand_metrics$n_enablers_ub >= 1){\r\n        if (\r\n          hand_produces_ub_and_two_mana_T1(hand_metrics, \"B ON T1\") |\r\n          hand_produces_ub_and_two_mana_T1(hand_metrics, \"U ON T1\")\r\n          ) return(TRUE)\r\n      }\r\n      \r\n      \r\n    }\r\n    # ENABLER 3 ####\r\n    if (hand_metrics$n_enablers_3 >= 1){\r\n      \r\n      # > 2U ####\r\n      if (hand_metrics$n_enablers_2u >= 1){\r\n        if (hand_metrics$mana_crypt){\r\n          if (hand_produces_ub_with_constraint(hand_metrics, \"U ON T1\")) return(TRUE)\r\n        }\r\n        \r\n        if(hand_produces_ub_and_three_mana_T1(hand_metrics, \"U ON T1\")) return(TRUE)\r\n        \r\n        \r\n      }\r\n      \r\n      # > MDFC 2U ####\r\n      if (hand_metrics$n_mdfc_enablers_2u >= 1){\r\n        if (hand_metrics$mana_crypt){\r\n          if (hand_produces_ub_with_constraint(hand_metrics, \"U ON T1\", mdfc_enabler = TRUE)) return(TRUE)\r\n        }\r\n        \r\n        if(hand_produces_ub_and_three_mana_T1(hand_metrics, \"U ON T1\")) return(TRUE)\r\n        \r\n        \r\n      }\r\n      \r\n      # > 2B ####\r\n      if (hand_metrics$n_enablers_2b >= 1){\r\n        \r\n        if (hand_metrics$mana_crypt){\r\n          if (hand_produces_ub_with_constraint(hand_metrics, \"B ON T1\")) return(TRUE)\r\n        }\r\n        \r\n        if (hand_metrics$dark_ritual){\r\n          if (hand_produces_ub_with_constraint(hand_metrics, \"B ON T1\")) return(TRUE)\r\n        }\r\n        \r\n        if(hand_produces_ub_and_three_mana_T1(hand_metrics, \"B ON T1\")) return(TRUE)\r\n        \r\n      }\r\n      \r\n      # > MDFC 2B ####\r\n      if (hand_metrics$n_mdfc_enablers_2b >= 1){\r\n        if (hand_metrics$mana_crypt){\r\n          if (hand_produces_ub_with_constraint(hand_metrics, \"B ON T1\", mdfc_enabler = TRUE)) return(TRUE)\r\n        }\r\n        \r\n        if (hand_metrics$dark_ritual){\r\n          if (hand_produces_ub_with_constraint(hand_metrics, \"B ON T1\")) return(TRUE)\r\n        }\r\n        \r\n        if(hand_produces_ub_and_three_mana_T1(hand_metrics, \"B ON T1\")) return(TRUE)\r\n        \r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  # YURIKO T1 ####\r\n  if (hand_produces_1ub_T1(hand_metrics)) return(TRUE)\r\n\r\n  return(FALSE)\r\n}\r\n\r\n# ---- End of is_yuriko_on_T2.R ----\r\n\r\n\r\n# ---- Start of process_card_data.R ----\r\n\r\n#' @export\r\nprocess_card_data <- function(filepath, run_checks = TRUE, use_httr = TRUE, waiter = NULL) {\r\n  parse_txt_file(filepath, run_checks) |> \r\n    add_scryfall_data(use_httr, waiter) |> \r\n    add_custom_attributes()\r\n}\r\n\r\nparse_txt_file <- function(filepath, run_checks) {\r\n\r\n  # Read cards into a character vector\r\n  cards <- readLines(filepath, warn = FALSE)\r\n\r\n  # TODO: Error handler when the file is not structured correctly\r\n\r\n  # Find the index of the last card in the main deck\r\n  index_last_card_in_main_deck <- which(cards == \"\")[[1]] - 1\r\n\r\n  # Remove all cards that are not part of the main deck\r\n  cards <- cards[seq_len(index_last_card_in_main_deck)]\r\n\r\n  cards_as_tibble <- cards |> \r\n    # Convert to tibble\r\n    tibble::tibble() |> \r\n    # Separate into n_cards and card_name columns\r\n    tidyr::separate(\r\n      col = \"cards\",\r\n      into = c(\"n_cards\", \"card_name\"),\r\n      sep = \" \",\r\n      extra = \"merge\",\r\n      convert = TRUE\r\n    )\r\n  \r\n  if (run_checks) {\r\n\r\n    # Check that the main deck has 99 cards\r\n    if (sum(cards_as_tibble$n_cards) != 99) {\r\n      cli::cli_abort(\"Main deck should have 99 cards\")\r\n    }\r\n\r\n  }\r\n\r\n  return(cards_as_tibble)\r\n\r\n}\r\n\r\nadd_scryfall_data <- function(card_data, use_httr = TRUE, waiter = NULL) {\r\n\r\n  card_data |> \r\n    dplyr::pull(card_name) |> \r\n    purrr::imap(.f = function(card_name, card_index) {\r\n\r\n      # Wait between requests to the API\r\n      Sys.sleep(0.1)\r\n      \r\n      if (use_httr) {\r\n\r\n        # API endpoint and query parameters\r\n        url <- \"https://api.scryfall.com/cards/named\"\r\n        query_params <- list(exact = card_name)\r\n        \r\n        # Make GET request to Scryfall API\r\n        response <- httr::GET(url, query = query_params)\r\n        \r\n        card_info <- response |>\r\n          httr::content(as = \"text\") |> \r\n          jsonlite::fromJSON(flatten = TRUE)\r\n\r\n      } else {\r\n\r\n        # httr does not work with shinylive\r\n        temp_card_json <- tempfile(pattern = \"card\", fileext = \".json\")\r\n\r\n        card_name_for_url <- card_name |> \r\n          stringr::str_replace_all(\" \", \"%20\") |> \r\n          stringr::str_replace_all(\"/\", \"%20\")\r\n\r\n        url <- glue::glue(\"https://api.scryfall.com/cards/named?exact={ card_name_for_url }\")\r\n\r\n        # API endpoint and query parameters\r\n        download.file(url, temp_card_json)\r\n\r\n        # Parse JSON content\r\n        card_info <- temp_card_json |> \r\n          jsonlite::fromJSON(flatten = TRUE)\r\n\r\n      }\r\n\r\n      if (card_info$layout %in% c(\"split\", \"flip\", \"adventure\", \"normal\")) {\r\n        out <- tibble::tibble(\r\n          card_name = card_name,\r\n          layout = card_info$layout,\r\n          name = card_info$name,\r\n          cmc = card_info$cmc,\r\n          colors = paste0(card_info$colors, collapse = \"\"),\r\n          mana_cost = card_info$mana_cost,\r\n          type = card_info$type_line,\r\n          produced_mana = paste0(card_info$produced_mana, collapse = \"\"),\r\n          img_src = card_info$image_uris$png\r\n        )\r\n      }\r\n\r\n      if (card_info$layout %in% c(\"transform\")) {\r\n        out <- tibble::tibble(\r\n          card_name = card_name,\r\n          layout = card_info$layout,\r\n          name = card_info$name,\r\n          cmc = card_info$cmc,\r\n          colors = paste0(card_info$card_faces$colors[[1]], collapse = \"\"),\r\n          mana_cost = paste0(card_info$card_faces$mana_cost[[1]], collapse = \"\"),\r\n          type = card_info$type_line,\r\n          produced_mana = paste0(card_info$produced_mana, collapse = \"\"),\r\n          img_src = card_info$card_faces$image_uris.png[[1]]\r\n        )\r\n      }\r\n\r\n      if (card_info$layout == \"modal_dfc\") {\r\n        out <- tibble::tibble(\r\n          card_name = card_name,\r\n          layout = card_info$layout,\r\n          name = card_info$name,\r\n          cmc = card_info$cmc,\r\n          colors = paste0(card_info$card_faces$colors[[1]], collapse = \"\"),\r\n          mana_cost = paste0(card_info$card_faces$mana_cost, collapse = \" // \"),\r\n          type = paste0(card_info$card_faces$type_line, collapse = \" // \"),\r\n          produced_mana = paste0(card_info$produced_mana, collapse = \"\"),\r\n          img_src = card_info$card_faces$image_uris.png[[1]]\r\n        )\r\n      }\r\n      \r\n      # TODO: add logic for \"prototype\" layout\r\n      \r\n      message <- glue::glue(\"Processing card { card_index } of { nrow(card_data) }: { card_name }\")\r\n      \r\n      if (!is.null(waiter)) {\r\n        waiter$update(\r\n          shiny::tagList(\r\n            waiter::spin_fading_circles(),\r\n            message\r\n          )\r\n        )\r\n      } else {\r\n        cli::cli_inform(message)\r\n      }\r\n      \r\n      out\r\n\r\n    }) |> \r\n    purrr::list_rbind()\r\n\r\n}\r\n\r\nadd_custom_attributes <- function(card_data) {\r\n\r\n  card_data |>\r\n    edit_scryfall_data() |> \r\n    dplyr::mutate(\r\n\r\n      enabler = is_enabler(cmc, type),\r\n\r\n      # Enabler cmc\r\n      enabler_0 = is_enabler_0(enabler, mana_cost),\r\n      enabler_1 = is_enabler_1(enabler, cmc, mana_cost),      \r\n      enabler_2 = is_enabler_2(enabler, cmc),\r\n      enabler_3 = is_enabler_3(enabler, cmc),\r\n\r\n      # Enabler mana cost (non-mdfc)\r\n      enabler_c = is_enabler_c(enabler_1, mana_cost),\r\n      enabler_u = is_enabler_u(enabler_1, mana_cost),\r\n      enabler_b = is_enabler_b(enabler_1, mana_cost),\r\n\r\n      enabler_1u = is_enabler_1u(enabler_2, mana_cost),\r\n      enabler_1b = is_enabler_1b(enabler_2, mana_cost),\r\n      enabler_uu = is_enabler_uu(enabler_2, mana_cost),\r\n      enabler_bb = is_enabler_bb(enabler_2, mana_cost),\r\n      enabler_ub = is_enabler_ub(enabler_2, mana_cost),\r\n\r\n      enabler_2u = is_enabler_2u(layout, enabler_3, mana_cost),\r\n      enabler_2b = is_enabler_2b(layout, enabler_3, mana_cost),\r\n\r\n      # Enabler mana cost (mdfc)\r\n      mdfc_enabler_2u = is_mdfc_enabler_2u(layout, enabler_3, mana_cost),\r\n      mdfc_enabler_2b = is_mdfc_enabler_2b(layout, enabler_3, mana_cost),\r\n\r\n      # Card color\r\n      color_u = is_color_u(mana_cost),\r\n      color_b = is_color_b(mana_cost),\r\n\r\n      # Lands (non-mdfc)\r\n      land = is_land(type),\r\n      color_land = is_color_land(land, produced_mana),\r\n      land_u = is_land_u(color_land, produced_mana),\r\n      land_b = is_land_b(color_land, produced_mana),\r\n\r\n      # Lands (mdfc)\r\n      mdfc_land = is_mdfc_land(layout, type),\r\n      mdfc_land_u = is_mdfc_land_u(mdfc_land, produced_mana),\r\n      mdfc_land_b = is_mdfc_land_b(mdfc_land, produced_mana),\r\n\r\n      # Cards that require additional logic\r\n      chrome_mox = card_name == \"Chrome Mox\",\r\n      dark_ritual = card_name == \"Dark Ritual\",\r\n      lotus_petal = card_name == \"Lotus Petal\",\r\n      mana_crypt = card_name == \"Mana Crypt\",\r\n      mox_diamond = card_name == \"Mox Diamond\"\r\n\r\n    )\r\n}\r\n\r\nedit_scryfall_data <- function(card_data) {\r\n\r\n  # For simplicity, we assume that we are playing first\r\n  # which means Gemstone Caverns produces only colorless mana\r\n  if (\"Gemstone Caverns\" %in% card_data$name) {\r\n    card_data <- card_data |> \r\n      dplyr::mutate(\r\n        produced_mana = ifelse(\r\n          test = name == \"Gemstone Caverns\",\r\n          yes = \"C\",\r\n          no = produced_mana\r\n        )\r\n      )\r\n  }\r\n  \r\n  # With Demonic Tutor we can tutor an Enabler with MV = 0\r\n  # So we can consider Demonic Tutor as an Enabler that costs 1B\r\n  # (for which logic was already defined)\r\n  if (\"Demonic Tutor\" %in% card_data$name) {\r\n    card_data <- card_data |> \r\n      dplyr::mutate(\r\n        type = ifelse(\r\n          test = name == \"Demonic Tutor\",\r\n          yes = \"Creature // Sorcery\",\r\n          no = type\r\n        )\r\n      )\r\n  }\r\n  \r\n  card_data\r\n\r\n}\r\n\r\n# ---- End of process_card_data.R ----\r\n\r\n\r\n# ---- Start of summarise_hand.R ----\r\n\r\nsummarise_hand <- function(opening_hand){\r\n  list(\r\n    \"n_lands\"        = opening_hand$land        |> sum(),\r\n    \"n_color_lands\"  = opening_hand$color_land  |> sum(),\r\n    \"n_lands_u\"      = opening_hand$land_u      |> sum(),\r\n    \"n_lands_b\"      = opening_hand$land_b      |> sum(),\r\n    \"n_mdfc_lands\"   = opening_hand$mdfc_land   |> sum(),\r\n    \"n_mdfc_lands_u\" = opening_hand$mdfc_land_u |> sum(),\r\n    \"n_mdfc_lands_b\" = opening_hand$mdfc_land_b |> sum(),\r\n    \r\n    \"n_enablers\"   = opening_hand$enabler   |> sum(),\r\n    \"n_enablers_0\" = opening_hand$enabler_0 |> sum(),\r\n    \"n_enablers_1\" = opening_hand$enabler_1 |> sum(),\r\n    \"n_enablers_2\" = opening_hand$enabler_2 |> sum(),\r\n    \"n_enablers_3\" = opening_hand$enabler_3 |> sum(),\r\n\r\n    \"n_enablers_c\" = opening_hand$enabler_c |> sum(),\r\n    \"n_enablers_u\" = opening_hand$enabler_u |> sum(),\r\n    \"n_enablers_b\" = opening_hand$enabler_b |> sum(),\r\n\r\n    \"n_enablers_1u\" = opening_hand$enabler_1u |> sum(),\r\n    \"n_enablers_1b\" = opening_hand$enabler_1b |> sum(),\r\n    \"n_enablers_uu\" = opening_hand$enabler_uu |> sum(),\r\n    \"n_enablers_bb\" = opening_hand$enabler_bb |> sum(),\r\n    \"n_enablers_ub\" = opening_hand$enabler_ub |> sum(),\r\n    \r\n    \"n_enablers_2u\" = opening_hand$enabler_2u |> sum(),\r\n    \"n_enablers_2b\" = opening_hand$enabler_2b |> sum(),\r\n    \r\n    \"n_mdfc_enablers_2u\" = opening_hand$mdfc_enabler_2u |> sum(),\r\n    \"n_mdfc_enablers_2b\" = opening_hand$mdfc_enabler_2b |> sum(),\r\n\r\n    \"n_cards_u\" = opening_hand$color_u |> sum(),\r\n    \"n_cards_b\" = opening_hand$color_b |> sum(),\r\n\r\n    \"chrome_mox\"  = \"Chrome Mox\"  %in% opening_hand$card_name,\r\n    \"dark_ritual\" = \"Dark Ritual\" %in% opening_hand$card_name,\r\n    \"lotus_petal\" = \"Lotus Petal\" %in% opening_hand$card_name,\r\n    \"mana_crypt\"  = \"Mana Crypt\"  %in% opening_hand$card_name,\r\n    \"mox_diamond\" = \"Mox Diamond\" %in% opening_hand$card_name\r\n  )\r\n}\r\n\r\n# ---- End of summarise_hand.R ----\r\n\r\n\r\n# ---- Start of utils-add_custom_attributes.R ----\r\n\r\n# ENABLERS ####\r\n\r\n# TODO: add logic for enablers that use phyrexian mana\r\n\r\nis_enabler <- function(cmc, type) {\r\n  cmc <= 3 & grepl(\"Creature\", type)\r\n}\r\n\r\n# > CMC = 0 ####\r\nis_enabler_0 <- function(is_enabler, mana_cost) {\r\n  is_enabler & mana_cost == \"{0}\"\r\n}\r\n\r\n# > CMC = 1 ####\r\nis_enabler_1 <- function(is_enabler, cmc, mana_cost) {\r\n  is_enabler & (cmc == 1 | mana_cost == \"{X}\")\r\n}\r\n\r\nis_enabler_c <- function(is_enabler_1, mana_cost) {\r\n  is_enabler_1 & mana_cost %in% c(\"{1}\", \"{X}\")\r\n}\r\n\r\nis_enabler_u <- function(is_enabler_1, mana_cost) {\r\n  is_enabler_1 & grepl(\"{U}\", mana_cost, fixed = TRUE)\r\n}\r\n\r\nis_enabler_b <- function(is_enabler_1, mana_cost) {\r\n  is_enabler_1 & grepl(\"{B}\", mana_cost, fixed = TRUE)\r\n}\r\n\r\n# > CMC = 2 ####\r\nis_enabler_2 <- function(is_enabler, cmc) {\r\n  is_enabler & cmc == 2\r\n}\r\n\r\nis_enabler_1u <- function(is_enabler_2, mana_cost) {\r\n  is_enabler_2 & grepl(\"{1}{U}\", mana_cost, fixed = TRUE)\r\n}\r\n\r\nis_enabler_1b <- function(is_enabler_2, mana_cost) {\r\n  is_enabler_2 & grepl(\"{1}{B}\", mana_cost, fixed = TRUE)\r\n}\r\n\r\nis_enabler_uu <- function(is_enabler_2, mana_cost) {\r\n  is_enabler_2 & grepl(\"{U}{U}\", mana_cost, fixed = TRUE)\r\n}\r\n\r\nis_enabler_bb <- function(is_enabler_2, mana_cost) {\r\n  is_enabler_2 & grepl(\"{B}{B}\", mana_cost, fixed = TRUE)\r\n}\r\n\r\nis_enabler_ub <- function(is_enabler_2, mana_cost) {\r\n  is_enabler_2 & grepl(\"{U}{B}\", mana_cost, fixed = TRUE)\r\n}\r\n\r\n# > CMC = 3 ####\r\nis_enabler_3 <- function(is_enabler, cmc) {\r\n  is_enabler & cmc == 3\r\n}\r\n\r\nis_enabler_2u <- function(layout, is_enabler_3, mana_cost) {\r\n  layout != \"modal_dfc\" & is_enabler_3 & grepl(\"{2}{U}\", mana_cost, fixed = TRUE)\r\n}\r\n\r\nis_enabler_2b <- function(layout, is_enabler_3, mana_cost) {\r\n  layout != \"modal_dfc\" & is_enabler_3 & grepl(\"{2}{B}\", mana_cost, fixed = TRUE)\r\n}\r\n\r\nis_mdfc_enabler_2u <- function(layout, is_enabler_3, mana_cost) {\r\n  layout == \"modal_dfc\" & is_enabler_3 & grepl(\"{2}{U}\", mana_cost, fixed = TRUE)\r\n}\r\n\r\nis_mdfc_enabler_2b <- function(layout, is_enabler_3, mana_cost) {\r\n  layout == \"modal_dfc\" & is_enabler_3 & grepl(\"{2}{B}\", mana_cost, fixed = TRUE)\r\n}\r\n\r\n# COLOR IDENTITY ####\r\nis_color_u <- function(colors) {\r\n  grepl(\"U\", colors)\r\n}\r\n\r\nis_color_b <- function(colors) {\r\n  grepl(\"B\", colors)\r\n}\r\n\r\n# LANDS ####\r\nis_land <- function(type) {\r\n  # mdfc cards that have a land in both card faces are included\r\n  grepl(\"Land\", type) & !grepl(\"(Creature)|(Instant)|(Sorcery)\", type)\r\n}\r\n\r\nis_color_land <- function(is_land, produced_mana) {\r\n  # Even though Fetchlands don't produce mana, they are considered color lands\r\n  is_land & (grepl(\"U|B\", produced_mana) | produced_mana == \"\")\r\n}\r\n\r\nis_land_u <- function(is_color_land, produced_mana) {\r\n  is_color_land & (grepl(\"U\", produced_mana) | produced_mana == \"\")\r\n}\r\n\r\nis_land_b <- function(is_color_land, produced_mana) {\r\n  is_color_land & (grepl(\"B\", produced_mana) | produced_mana == \"\")\r\n}\r\n\r\n# MDFC LANDS ####\r\nis_mdfc_land <- function(layout, type) {\r\n  # mdfc cards that have a land in both card faces are excluded\r\n  layout == \"modal_dfc\" & grepl(\"Land\", type) & grepl(\"(Creature)|(Instant)|(Sorcery)\", type)\r\n}\r\n\r\nis_mdfc_land_u <- function(is_mdfc_land, produced_mana) {\r\n  is_mdfc_land & grepl(\"U\", produced_mana)\r\n}\r\n\r\nis_mdfc_land_b <- function(is_mdfc_land, produced_mana) {\r\n  is_mdfc_land & grepl(\"B\", produced_mana)\r\n}\r\n\r\n# ---- End of utils-add_custom_attributes.R ----\r\n\r\n\r\n# ---- Start of utils.R ----\r\n\r\n#' @export\r\ndraw_seven <- function(decklist, must_have = NULL){\r\n  if (is.null(must_have)) {\r\n\r\n    decklist |>\r\n      dplyr::slice_sample(n = 7)\r\n\r\n  } else {\r\n    n_must_have <- length(must_have)\r\n    \r\n    hand <- decklist |>\r\n      dplyr::filter(!card_name %in% must_have) |>\r\n      dplyr::slice_sample(n = 7 - n_must_have)\r\n    \r\n    hand |>\r\n      dplyr::bind_rows(decklist |> dplyr::filter(card_name %in% must_have))\r\n  }\r\n\r\n}\r\n\r\n#' @export\r\nget_hand <- function(decklist, cards){\r\n  decklist |>\r\n    dplyr::filter(card_name %in% cards)\r\n}\r\n\r\n# ---- End of utils.R ----\r\n\r\n\r\n","type":"text"}]
