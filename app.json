[{"name":"server.R","content":"function(input, output, session) {\n\n  # Remove delay to show progress bar\n  options(cli.progress_show_after = 0)\n\n  decklist <- shiny::eventReactive(input$upload_decklist, {\n    \n    input_source_path <- switch (input$decklist_source,\n      moxfield_url = input$user_moxfield_url,\n      file = input$user_file$datapath\n    )\n    \n    process_card_data(\n      decklist_source = input$decklist_source,\n      source_path = input_source_path,\n      use_httr = FALSE # Change to TRUE in DEV\n    )\n\n  })\n  \n  output$decklist_stats_table <- shiny::renderTable({\n    shiny::req(decklist())\n    \n    decklist() |> \n      dplyr::left_join(\n        dplyr::select(get_group_attributes(), -card_name_scryfall)\n      ) |> \n      dplyr::select(card_name_scryfall, group) |> \n      dplyr::mutate(\n        `Group Class` = dplyr::case_when(\n          stringr::str_starts(group, \"enabler\") ~ \"Non-MDFC Enabler\",\n          stringr::str_starts(group, \"land\") ~ \"Land\",\n          stringr::str_starts(group, \"mdfc\") ~ \"MDFC Card\",\n          stringr::str_starts(group, \"other\") ~ \"Other\",\n          group %in% c(\"dark_ritual\", \"chrome_mox\", \"lotus_petal\", \"mana_crypt\", \"mox_diamond\") ~ \"Fast Mana\"\n        ) |> \n          factor(\n            levels = c(\n              \"Non-MDFC Enabler\",\n              \"Land\",\n              \"MDFC Card\",\n              \"Fast Mana\",\n              \"Other\"\n            )\n          ),\n        Group = dplyr::case_when(\n          group == \"enabler_0\" ~ \"Mana Cost {0}\",\n          group == \"enabler_c\" ~ \"Mana Cost {1} or {X}\",\n          group == \"enabler_u\" ~ \"Mana Cost {U} or {X}{U}\",\n          group == \"enabler_b\" ~ \"Mana Cost {B}\",\n          group == \"enabler_cc\" ~ \"Mana Cost {2}\",\n          group == \"enabler_1u\" ~ \"Mana Cost {1}{U}\",\n          group == \"enabler_1b\" ~ \"Mana Cost {1}{B}\",\n          group == \"enabler_uu\" ~ \"Mana Cost {U}{U}\",\n          group == \"enabler_bb\" ~ \"Mana Cost {B}{B}\",\n          group == \"enabler_ub\" ~ \"Mana Cost {U}{B}\",\n          group == \"enabler_1bb\" ~ \"Mana Cost {1}{B}{B}\",\n          group == \"enabler_2u\" ~ \"Mana Cost {2}{U}\",\n          group == \"enabler_2b\" ~ \"Mana Cost {2}{B}\",\n          group == \"land_c\" ~ \"Only Produce {C}\",\n          group == \"land_u\" ~ \"Only Produce {U}\",\n          group == \"land_b\" ~ \"Only Produce {B}\",\n          group == \"land_ub\" ~ \"Produce {U} or {B} (or Fetchland)\",\n          group == \"mdfc_enabler_2u\" ~ \"MDFC Enabler with Mana Cost {2}{U}\",\n          group == \"mdfc_enabler_2b\" ~ \"MDFC Enabler with Mana Cost {2}{B}\",\n          group == \"mdfc_land_u\" ~ \"Non-Enabler MDFC that Only Produce {U}\",\n          group == \"mdfc_land_b\" ~ \"Non-Enabler MDFC that Only Produce {B}\",\n          group == \"dark_ritual\" ~ \"Fast Mana\",\n          group == \"chrome_mox\" ~ \"Fast Mana\",\n          group == \"lotus_petal\" ~ \"Fast Mana\",\n          group == \"mana_crypt\" ~ \"Fast Mana\",\n          group == \"mox_diamond\" ~ \"Fast Mana\",\n          group == \"other_c\" ~ \"Colorless\",\n          group == \"other_u\" ~ \"Mono {U}\",\n          group == \"other_b\" ~ \"Mono {B}\",\n          group == \"other_ub\" ~ \"{U}{B}\"\n        ) |> \n          factor(\n            levels = c(\n              \"Mana Cost {0}\",\n              \"Mana Cost {1} or {X}\",\n              \"Mana Cost {U} or {X}{U}\",\n              \"Mana Cost {B}\",\n              \"Mana Cost {2}\",\n              \"Mana Cost {1}{U}\",\n              \"Mana Cost {1}{B}\",\n              \"Mana Cost {U}{U}\",\n              \"Mana Cost {B}{B}\",\n              \"Mana Cost {U}{B}\",\n              \"Mana Cost {1}{B}{B}\",\n              \"Mana Cost {2}{U}\",\n              \"Mana Cost {2}{B}\",\n              \"Only Produce {C}\",\n              \"Only Produce {U}\",\n              \"Only Produce {B}\",\n              \"Produce {U} or {B} (or Fetchland)\",\n              \"MDFC Enabler with Mana Cost {2}{U}\",\n              \"MDFC Enabler with Mana Cost {2}{B}\",\n              \"Non-Enabler MDFC that Only Produce {B}\",\n              \"Non-Enabler MDFC that Only Produce {U}\",\n              \"Fast Mana\",\n              \"Colorless\",\n              \"Mono {U}\",\n              \"Mono {B}\",\n              \"{U}{B}\"\n            )\n          )\n      ) |> \n\n      dplyr::group_by(`Group Class`, Group) |> \n      dplyr::summarise( `N Cards` = dplyr::n(), `Cards` = paste0(card_name_scryfall, collapse = \",<br>\"))\n  }, striped = TRUE, sanitize.text.function = identity)\n  \n  shiny::observeEvent(decklist(), {\n    shiny::updateSelectInput(\n      session = session,\n      inputId = \"fixed_cards\",\n      choices = decklist()$card_name_scryfall,\n      selected = NULL\n    )\n  })\n\n  prob_from_decklist <- shiny::eventReactive(input$simulate_from_decklist, {\n    run_simulation(decklist(), fixed_cards = input$fixed_cards, n_sim = input$n_sim)\n  })\n  \n  simulation_summary_from_decklist_html <- shiny::eventReactive(prob_from_decklist(), {\n\n    prob_first_two_hands <- 1 - (1 - prob_from_decklist()) ^ 2\n    prob_first_three_hands <- 1 - (1 - prob_from_decklist()) ^ 3\n    prob_first_four_hands <- 1 - (1 - prob_from_decklist()) ^ 4\n    \n    shiny::div(\n      shiny::tags$ul(\n        shiny::tags$li(shiny::HTML(glue::glue(\"{ shiny::strong( scales::label_comma()(input$n_sim) ) } random 7-card hands were drawn from { shiny::strong('Your Decklist') }\"))),\n        if (!is.null(input$fixed_cards)) shiny::tags$li(shiny::HTML(glue::glue(\"The following cards were fixed to appear in all hands: { paste0(input$fixed_cards, collapse = ', ')}\"))),\n        shiny::tags$li(shiny::HTML(glue::glue(\"{ bold_percentage(prob_from_decklist()) } of the hands drawn had enough cards to trigger Yuriko on turn two\")))\n      ),\n      if (is.null(input$fixed_cards)) {\n        shiny::div(\n          \"Based on that value, it is expected that enough cards to trigger Yuriko on turn two will be present in:\",\n          shiny::tags$ul(\n            shiny::tags$li(shiny::HTML(glue::glue(\"one of the first two hands drawn in { bold_percentage(prob_first_two_hands) } of matches\"))),\n            shiny::tags$li(shiny::HTML(glue::glue(\"one of the first three hands drawn in { bold_percentage(prob_first_three_hands) }  of matches\"))),\n            shiny::tags$li(shiny::HTML(glue::glue(\"one of the first four hands drawn in { bold_percentage(prob_first_four_hands) }  of matches\"))),\n          ),\n          \"Then, assuming a \\\"free\\\" mulligan we can say that:\",\n          shiny::tags$ul(\n            shiny::tags$li(shiny::HTML(glue::glue(\"in { bold_percentage(prob_first_two_hands) } of matches a { shiny::strong('7-card') } hand will have enough cards to trigger Yuriko on turn two (i.e. considering at most one mulligan)\"))),\n            shiny::tags$li(shiny::HTML(glue::glue(\"in { bold_percentage(prob_first_three_hands) } of matches a hand with { shiny::strong('at least 6 cards') } will have enough cards to trigger Yuriko on turn two (i.e. considering at most two mulligans)\"))),\n            shiny::tags$li(shiny::HTML(glue::glue(\"in { bold_percentage(prob_first_four_hands) } of matches a hand with { shiny::strong('at least 5 cards') } will have enough cards to trigger Yuriko on turn two (i.e. considering at most three mulligans)\"))),\n          )\n        )\n        \n      }\n    )\n\n  })\n  \n  output$simulation_summary_from_decklist <- shiny::renderUI({\n    simulation_summary_from_decklist_html()\n  })\n\n  shiny::observeEvent(decklist(), {\n    shiny::updateSelectInput(session = session, inputId = \"card1\", choices = decklist()$card_name_scryfall, selected = decklist()$card_name_scryfall[[1]])\n    shiny::updateSelectInput(session = session, inputId = \"card2\", choices = decklist()$card_name_scryfall, selected = decklist()$card_name_scryfall[[2]])\n    shiny::updateSelectInput(session = session, inputId = \"card3\", choices = decklist()$card_name_scryfall, selected = decklist()$card_name_scryfall[[3]])\n    shiny::updateSelectInput(session = session, inputId = \"card4\", choices = decklist()$card_name_scryfall, selected = decklist()$card_name_scryfall[[4]])\n    shiny::updateSelectInput(session = session, inputId = \"card5\", choices = decklist()$card_name_scryfall, selected = decklist()$card_name_scryfall[[5]])\n    shiny::updateSelectInput(session = session, inputId = \"card6\", choices = decklist()$card_name_scryfall, selected = decklist()$card_name_scryfall[[6]])\n    shiny::updateSelectInput(session = session, inputId = \"card7\", choices = decklist()$card_name_scryfall, selected = decklist()$card_name_scryfall[[7]])\n  })\n  \n  shiny::observeEvent(input$random_hand, {\n    random_hand <- draw_seven(decklist())\n    shiny::updateSelectInput(session = session, inputId = \"card1\", selected = random_hand$card_name_scryfall[[1]])\n    shiny::updateSelectInput(session = session, inputId = \"card3\", selected = random_hand$card_name_scryfall[[2]])\n    shiny::updateSelectInput(session = session, inputId = \"card4\", selected = random_hand$card_name_scryfall[[3]])\n    shiny::updateSelectInput(session = session, inputId = \"card2\", selected = random_hand$card_name_scryfall[[4]])\n    shiny::updateSelectInput(session = session, inputId = \"card5\", selected = random_hand$card_name_scryfall[[5]])\n    shiny::updateSelectInput(session = session, inputId = \"card6\", selected = random_hand$card_name_scryfall[[6]])\n    shiny::updateSelectInput(session = session, inputId = \"card7\", selected = random_hand$card_name_scryfall[[7]])\n  })\n  \n  output$image1 <- render_card(decklist(), input, card_index = 1)\n  output$image2 <- render_card(decklist(), input, card_index = 2)\n  output$image3 <- render_card(decklist(), input, card_index = 3)\n  output$image4 <- render_card(decklist(), input, card_index = 4)\n  output$image5 <- render_card(decklist(), input, card_index = 5)\n  output$image6 <- render_card(decklist(), input, card_index = 6)\n  output$image7 <- render_card(decklist(), input, card_index = 7)\n  \n  test_hand <- shiny::reactive({\n    decklist() |> \n      dplyr::filter(card_name_scryfall %in% c(input$card1, input$card2, input$card3, input$card4, input$card5, input$card6, input$card7))\n  })\n  \n  output$test_hand_output <- shiny::renderUI({\n    if (is_yuriko_on_T2(test_hand())) {\n      shiny::div(\n        class = \"alert alert-success\",\n        \"Yuriko triggers on turn two\"\n      )\n    } else {\n      shiny::div(\n        class = \"alert alert-danger\",\n        \"Yuriko does not trigger on turn two\"\n      )\n    }\n  })\n  \n  n_enablers_mv_1 <- shiny::reactive({\n    input$enablers_c + \n      input$enablers_u + \n      input$enablers_b\n  })\n  \n  n_enablers_mv_2 <- shiny::reactive({\n    input$enablers_cc +\n      input$enablers_1u +\n      input$enablers_1b +\n      input$enablers_uu +\n      input$enablers_bb +\n      input$enablers_ub    \n  })\n  \n  n_enablers_mv_3 <- shiny::reactive({\n    input$enablers_1bb +\n      input$enablers_2u +\n      input$enablers_2b \n  })\n  \n  n_mdfc_enablers_mv_3 <- shiny::reactive({\n    input$mdfc_enablers_2u +\n      input$mdfc_enablers_2b\n  })\n  \n  n_enablers <- shiny::reactive({\n    input$enablers_0 +\n      n_enablers_mv_1() +\n      n_enablers_mv_2() +\n      n_enablers_mv_3() +\n      n_mdfc_enablers_mv_3()\n  })\n  \n  n_lands <- shiny::reactive({\n    input$lands_c +\n      input$lands_u +\n      input$lands_b +\n      input$lands_ub\n  })\n  \n  # Don't include mdfc enablers\n  n_mdfc_lands <- shiny::reactive({\n    input$mdfc_lands_b +\n      input$mdfc_lands_u\n  })\n\n  n_others <- shiny::reactive({\n    input$others_c +\n      input$others_u +\n      input$others_b +\n      input$others_ub\n  })\n  \n  n_fast_mana <- shiny::reactive({\n    input$include_dark_ritual +\n      input$include_chrome_mox +\n      input$include_lotus_petal +\n      input$include_mana_crypt +\n      input$include_mox_diamond\n  })\n  \n  n_cards_in_deck <- shiny::reactive({\n    n_enablers() +\n      n_lands() +\n      n_mdfc_lands() +\n      n_others() +\n      n_fast_mana()\n  })\n\n  output$box_value_n_cards_in_deck <- shiny::renderText({\n    n_cards_in_deck()\n  })\n  \n  n_missing_excess <- shiny::reactive({\n    99 - n_cards_in_deck()\n  })\n  \n  output$box_title_missing_excess <- shiny::renderText({\n    if (n_missing_excess() >= 0) {\n      \"Missing Cards\"\n    } else {\n      \"Excess Cards\"\n    }\n  })\n  \n  output$box_value_n_missing_excess <- shiny::renderText({\n    abs(n_missing_excess())\n  })\n  \n  shiny::observeEvent(n_missing_excess(), {\n    if (n_missing_excess() == 0) {\n      shinyjs::removeClass(id = \"box_n_missing_excess\", class = \"bg-danger\")\n      shinyjs::addClass(id = \"box_n_missing_excess\",class = \"bg-success\")\n    } else if (n_missing_excess() != 0){\n      shinyjs::removeClass(id = \"box_n_missing_excess\", class = \"bg-success\")\n      shinyjs::addClass(id = \"box_n_missing_excess\",class = \"bg-danger\")\n    }\n  })\n  \n  output$box_value_n_enablers <- shiny::renderText({\n    n_enablers()\n  })\n  \n  output$box_title_n_enablers_tooltip <- shiny::renderUI({\n    shiny::tagList(\n      shiny::p(\"Distributed as follows:\"),\n      shiny::tags$ul(\n        shiny::tags$li(glue::glue(\"MV 0: { input$enablers_0 }\")),\n        shiny::tags$li(glue::glue(\"MV 1: { n_enablers_mv_1() }\")),\n        shiny::tags$li(glue::glue(\"MV 2: { n_enablers_mv_2() }\")),\n        shiny::tags$li(glue::glue(\"MV 3: { n_enablers_mv_3() + n_mdfc_enablers_mv_3() }\"))\n      ),\n      shiny::p(\"MDFC Enablers are included.\")\n    )\n  })\n  \n  output$box_value_n_lands <- shiny::renderText({\n    n_lands()\n  })\n  \n  output$box_title_n_lands_tooltip <- shiny::renderUI({\n    shiny::tagList(\n      shiny::p(\"Distributed as follows:\"),\n      shiny::tags$ul(\n        shiny::tags$li(glue::glue(\"Only Produce C: { input$lands_c }\")),\n        shiny::tags$li(glue::glue(\"Only Produce U: { input$lands_u } ({ input$lands_u + input$mdfc_lands_u + input$mdfc_enablers_2u } including MDFC)\")),\n        shiny::tags$li(glue::glue(\"Only Produce B: { input$lands_b } ({ input$lands_b + input$mdfc_lands_b + input$mdfc_enablers_2b } including MDFC)\")),\n        shiny::tags$li(glue::glue(\"Produce UB: { input$lands_ub }. Fetchlands are included here.\")),\n      )\n    )\n  })\n  \n  output$box_value_n_lands_including_mdfc <- shiny::renderText({\n    n_lands() +\n      n_mdfc_lands() +\n      n_mdfc_enablers_mv_3()\n  })\n  \n  output$box_title_fast_mana <- shiny::renderUI({\n    \n    if (n_fast_mana() == 0) {\n      \"Fast Mana\"\n    } else {\n      \n      shiny::span(\n        \"Fast Mana\",\n        bslib::tooltip(\n          trigger = bsicons::bs_icon(\"info-circle\"),\n          shiny::tagList(\n            shiny::p(\"Selected cards:\"),\n            shiny::tags$ul(\n              if (input$include_dark_ritual) shiny::tags$li(\"Dark Ritual\"),\n              if (input$include_chrome_mox) shiny::tags$li(\"Chrome Mox\"),\n              if (input$include_lotus_petal) shiny::tags$li(\"Lotus Petal\"),\n              if (input$include_mana_crypt) shiny::tags$li(\"Mana Crypt\"),\n              if (input$include_mox_diamond) shiny::tags$li(\"Mox Diamond\")\n            )\n          ),\n          options = list(customClass = \"left-and-full-width\")\n        )\n      )\n    }\n  })\n  \n  output$box_value_n_fast_mana <- shiny::renderText({\n    n_fast_mana()\n  })\n  \n  prob_from_counts <- shiny::eventReactive(input$simulate_from_counts, {\n    decklist <- decklist_from_counts(\n      list(\n        \"enabler_0\"       = input$enablers_0,\n        \"enabler_b\"       = input$enablers_b,\n        \"enabler_u\"       = input$enablers_u,\n        \"enabler_c\"       = input$enablers_c,\n        \"enabler_bb\"      = input$enablers_bb,\n        \"enabler_uu\"      = input$enablers_uu,\n        \"enabler_ub\"      = input$enablers_ub,\n        \"enabler_1b\"      = input$enablers_1b,\n        \"enabler_1u\"      = input$enablers_1u,\n        \"enabler_cc\"      = input$enablers_cc,\n        \"enabler_1bb\"     = input$enablers_1bb,\n        \"enabler_2b\"      = input$enablers_2b,\n        \"enabler_2u\"      = input$enablers_2u,\n        \"mdfc_enabler_2b\" = input$mdfc_enablers_2b,\n        \"mdfc_enabler_2u\" = input$mdfc_enablers_2u,\n        \"land_b\"          = input$lands_b,\n        \"land_u\"          = input$lands_u,\n        \"land_c\"          = input$lands_c,\n        \"land_ub\"         = input$lands_ub,\n        \"mdfc_land_b\"     = input$mdfc_lands_b,\n        \"mdfc_land_u\"     = input$mdfc_lands_u,\n        \"other_b\"         = input$others_b,\n        \"other_u\"         = input$others_u,\n        \"other_c\"         = input$others_c,\n        \"other_ub\"        = input$others_ub,\n        \"dark_ritual\"     = input$include_dark_ritual,\n        \"chrome_mox\"      = input$include_chrome_mox,\n        \"lotus_petal\"     = input$include_lotus_petal,\n        \"mana_crypt\"      = input$include_mana_crypt,\n        \"mox_diamond\"     = input$include_mox_diamond\n      )\n    )\n    \n    run_simulation(decklist, n_sim = input$n_sim_from_counts)\n  })\n  \n  simulation_summary_from_counts_html <- shiny::eventReactive(prob_from_counts(), {\n    \n    prob_first_two_hands <- 1 - (1 - prob_from_counts()) ^ 2\n    prob_first_three_hands <- 1 - (1 - prob_from_counts()) ^ 3\n    prob_first_four_hands <- 1 - (1 - prob_from_counts()) ^ 4\n    \n    shiny::div(\n      shiny::tags$ul(\n        shiny::tags$li(shiny::HTML(glue::glue(\"{ shiny::strong( scales::label_comma()(input$n_sim_from_counts) ) } random 7-card hands were drawn from { shiny::strong('Custom Decklist') }\"))),\n        shiny::tags$li(shiny::HTML(glue::glue(\"{ bold_percentage(prob_from_counts()) } of the hands drawn had enough cards to trigger Yuriko on turn two\")))\n      ),\n      \n      shiny::div(\n        \"Based on that value, it is expected that enough cards to trigger Yuriko on turn two will be present in:\",\n        shiny::tags$ul(\n          shiny::tags$li(shiny::HTML(glue::glue(\"one of the first two hands drawn in { bold_percentage(prob_first_two_hands) } of matches\"))),\n          shiny::tags$li(shiny::HTML(glue::glue(\"one of the first three hands drawn in { bold_percentage(prob_first_three_hands) }  of matches\"))),\n          shiny::tags$li(shiny::HTML(glue::glue(\"one of the first four hands drawn in { bold_percentage(prob_first_four_hands) }  of matches\"))),\n        ),\n        \"Then, assuming a \\\"free\\\" mulligan we can say that:\",\n        shiny::tags$ul(\n          shiny::tags$li(shiny::HTML(glue::glue(\"in { bold_percentage(prob_first_two_hands) } of matches a { shiny::strong('7-card') } hand will have enough cards to trigger Yuriko on turn two (i.e. considering at most one mulligan)\"))),\n          shiny::tags$li(shiny::HTML(glue::glue(\"in { bold_percentage(prob_first_three_hands) } of matches a hand with { shiny::strong('at least 6 cards') } will have enough cards to trigger Yuriko on turn two (i.e. considering at most two mulligans)\"))),\n          shiny::tags$li(shiny::HTML(glue::glue(\"in { bold_percentage(prob_first_four_hands) } of matches a hand with { shiny::strong('at least 5 cards') } will have enough cards to trigger Yuriko on turn two (i.e. considering at most three mulligans)\"))),\n        )\n      )\n      \n      \n    )\n    \n  })\n  \n  output$simulation_summary_from_counts <- shiny::renderUI({\n    simulation_summary_from_counts_html()\n  })\n\n}","type":"text"},{"name":"ui.R","content":"shiny::tagList(\n  shiny::tags$head(\n    tags$link(rel = \"stylesheet\", type = \"text/css\", href = \"styles.css\")\n  ),\n  shinyjs::useShinyjs(),\n  bslib::page_navbar(\n    title = \"Yuriko Simulator\",\n    fillable = c(\"Your Decklist\"),\n    bslib::nav_panel(\n      title = \"Your Decklist\",\n      bslib::layout_sidebar(\n        sidebar = bslib::sidebar(\n          width = 520,\n          title = \"Upload Decklist\",\n          shiny::selectInput(\n            inputId = \"decklist_source\",\n            label = \"Select Source\",\n            choices = c(\n              # \"Moxfield URL\" = \"moxfield_url\", # Doesn't work in shinylive\n              \"File\" = \"file\"\n            )\n          ),\n          shiny::div(\n            shiny::conditionalPanel(\n              condition = \"input.decklist_source === 'moxfield_url'\",\n              shiny::textInput(\n                inputId = \"user_moxfield_url\",\n                label = \"Paste Moxfield URL\",\n                placeholder = \"Expected format: https://www.moxfield.com/decks/DECK_ID\",\n                width = \"100%\"\n              )\n            ),\n            shiny::conditionalPanel(\n              condition = \"input.decklist_source === 'file'\",\n              shiny::fileInput(\n                inputId = \"user_file\",\n                label = \"Select File\",\n                width = \"100%\"\n              )\n            )\n          ),\n          shiny::actionButton(\n            inputId = \"upload_decklist\",\n            label = \"Upload\"\n          )\n        ),\n        bslib::navset_card_tab(\n          bslib::nav_panel(\n            title = \"Decklist Stats\",\n            shiny::tableOutput(outputId = \"decklist_stats_table\")\n          ),\n          bslib::nav_panel(\n            title = \"Simulate\",\n            bslib::layout_sidebar(\n              sidebar = bslib::sidebar(\n                width = 400,\n                shiny::numericInput(\n                  inputId = \"n_sim\",\n                  label = \"Number of Hands to Draw\",\n                  min = 1000,\n                  value = 1000,\n                  step = 1\n                ),\n                shiny::selectizeInput(\n                  inputId = \"fixed_cards\",\n                  label = bslib::tooltip(\n                    trigger = list(\n                      \"Select Fixed Card(s) for All Hands\",\n                      bsicons::bs_icon(\"info-circle\")\n                    ),\n                    \"Selected card(s) will be present in all simulated hands drawn\"\n                  ),\n                  choices = NULL,\n                  selected = NULL,\n                  multiple = TRUE,\n                  options = list(\n                    maxItems = 7\n                  )\n                ) |> \n                  shiny::tagAppendAttributes(class = \"fixed-cards\"),\n                shiny::actionButton(\n                  inputId = \"simulate_from_decklist\",\n                  label = \"Run Simulation\"\n                )\n              ),\n              bslib::card(\n                bslib::card_header(\"Simulation Results\"),\n                shiny::uiOutput(\"simulation_summary_from_decklist\")\n              )\n            )\n          ),\n          bslib::nav_panel(\n            title = \"Test Hand\",\n            bslib::layout_sidebar(\n              sidebar = bslib::sidebar(\n                width = 400,\n                shiny::actionButton(\n                  inputId = \"random_hand\",\n                  label = \"Draw Random Hand\"\n                ),\n                \"Cards in Hand:\",\n                shiny::selectInput(inputId = \"card1\", label = NULL, choices = NULL),\n                shiny::selectInput(inputId = \"card2\", label = NULL, choices = NULL),\n                shiny::selectInput(inputId = \"card3\", label = NULL, choices = NULL),\n                shiny::selectInput(inputId = \"card4\", label = NULL, choices = NULL),\n                shiny::selectInput(inputId = \"card5\", label = NULL, choices = NULL),\n                shiny::selectInput(inputId = \"card6\", label = NULL, choices = NULL),\n                shiny::selectInput(inputId = \"card7\", label = NULL, choices = NULL)\n              ),\n              bslib::card(\n                bslib::card_header(\"Your Hand\"),\n                bslib::layout_columns(\n                  col_widths = c(\n                    -2, 2, 2, 2, 2, -2, # 4 cards in row one\n                    -3, 2, 2, 2, -3   # 3 cards in row two\n                  ),\n                  shiny::uiOutput(\"image1\", inline = TRUE),\n                  shiny::uiOutput(\"image2\", inline = TRUE),\n                  shiny::uiOutput(\"image3\", inline = TRUE),\n                  shiny::uiOutput(\"image4\", inline = TRUE),\n                  shiny::uiOutput(\"image5\", inline = TRUE),\n                  shiny::uiOutput(\"image6\", inline = TRUE),\n                  shiny::uiOutput(\"image7\", inline = TRUE)\n                )\n              ),\n              shiny::uiOutput(\"test_hand_output\")\n            )\n          )\n        )\n      )\n    ),\n    bslib::nav_panel(\n      title = \"Group Counts\",\n      bslib::card(\n        bslib::card_header(\"Decklist Composition Summary\"),\n        bslib::layout_columns(\n          bslib::value_box(\n            title = \"Cards in Deck\",\n            value = shiny::textOutput(outputId = \"box_value_n_cards_in_deck\")\n          ),\n          bslib::value_box(\n            id = \"box_n_missing_excess\",\n            title = shiny::textOutput(outputId = \"box_title_missing_excess\"),\n            value = shiny::textOutput(outputId = \"box_value_n_missing_excess\"),\n            class = \"text-light\"\n          ),\n          bslib::value_box(\n            title = shiny::span(\n              \"Enablers\",\n              bslib::tooltip(\n                trigger = bsicons::bs_icon(\"info-circle\"),\n                shiny::htmlOutput(outputId = \"box_title_n_enablers_tooltip\"),\n                options = list(customClass = \"left-and-full-width\")\n              )\n            ),\n            value = shiny::textOutput(outputId = \"box_value_n_enablers\")\n          ),\n          bslib::value_box(\n            title = shiny::span(\n              \"Lands\",\n              bslib::tooltip(\n                trigger = bsicons::bs_icon(\"info-circle\"),\n                shiny::htmlOutput(outputId = \"box_title_n_lands_tooltip\"),\n                options = list(customClass = \"left-and-full-width\")\n              )\n            ),\n            value = shiny::textOutput(outputId = \"box_value_n_lands\"),\n            shiny::span(shiny::em(\"(\", shiny::textOutput(outputId = \"box_value_n_lands_including_mdfc\", inline = TRUE), \"including MDFC )\"))\n          ),\n          bslib::value_box(\n            title = shiny::htmlOutput(outputId = \"box_title_fast_mana\"),\n            value = shiny::textOutput(outputId = \"box_value_n_fast_mana\")\n          )\n        )\n      ),\n      bslib::navset_card_tab(\n        bslib::nav_panel(\n          title = \"Allocate Cards\",\n          bslib::card(\n            bslib::card_header(\n              bslib::tooltip(\n                trigger = list(\n                  \"Non-MDFC Enablers\",\n                  bsicons::bs_icon(\"info-circle\")\n                ),\n                \"An Enabler is a Creature you cast on Turn 1 and then use to Ninjutsu Yuriko onto the battlefield on Turn 2. MDFC Enablers (such as Boggart Trawler) are allocated in a different section.\"\n              )\n            ),\n            bslib::layout_columns(\n              custom_autonumericInput(\n                inputId = \"enablers_0\",\n                label = bslib::tooltip(\n                  trigger = list(\n                    \"Mana Cost {0}\",\n                    bsicons::bs_icon(\"info-circle\")\n                  ),\n                  \"e.g. Ornithopter\"\n                )\n              ),\n              custom_autonumericInput(\n                inputId = \"enablers_c\",\n                label = bslib::tooltip(\n                  trigger = list(\n                    \"Mana Cost {1} or {X}\",\n                    bsicons::bs_icon(\"info-circle\")\n                  ),\n                  \"e.g. Universal Automaton; Stonecoil Serpent\"\n                )\n              ),\n              custom_autonumericInput(\n                inputId = \"enablers_u\",\n                label = bslib::tooltip(\n                  trigger = list(\n                    \"Mana Cost {U} or {X}{U}\",\n                    bsicons::bs_icon(\"info-circle\")\n                  ),\n                  shiny::HTML(\"e.g. Mothdust Changeling;<br>Ingenious Prodigy\")\n                )\n              ),\n              custom_autonumericInput(\n                inputId = \"enablers_b\",\n                label = bslib::tooltip(\n                  trigger = list(\n                    \"Mana Cost {B}\",\n                    bsicons::bs_icon(\"info-circle\")\n                  ),\n                  \"e.g. Changeling Outcast\"\n                )\n              )\n            ),\n            bslib::layout_columns(\n              col_widths = c(3, 3, 3, -3),\n              custom_autonumericInput(\n                inputId = \"enablers_cc\",\n                label = bslib::tooltip(\n                  trigger = list(\n                    \"Mana Cost {2}\",\n                    bsicons::bs_icon(\"info-circle\")\n                  ),\n                  \"e.g. Metallic Mimic\"\n                )\n              ),\n              custom_autonumericInput(\n                inputId = \"enablers_1u\",\n                label = bslib::tooltip(\n                  trigger = list(\n                    \"Mana Cost {1}{U}\",\n                    bsicons::bs_icon(\"info-circle\")\n                  ),\n                  \"e.g. Moon-Circuit Hacker\"\n                )\n              ),\n              custom_autonumericInput(\n                inputId = \"enablers_1b\",\n                label = bslib::tooltip(\n                  trigger = list(\n                    \"Mana Cost {1}{B}\",\n                    bsicons::bs_icon(\"info-circle\")\n                  ),\n                  \"e.g. Inkrise Infiltrator\"\n                )\n              )\n            ),\n            bslib::layout_columns(\n              col_widths = c(3, 3, 3, -3),\n              custom_autonumericInput(\n                inputId = \"enablers_uu\",\n                label = bslib::tooltip(\n                  trigger = list(\n                    \"Mana Cost {U}{U}\",\n                    bsicons::bs_icon(\"info-circle\")\n                  ),\n                  \"e.g. Thassa's Oracle\"\n                )\n              ),\n              custom_autonumericInput(\n                inputId = \"enablers_bb\",\n                label = bslib::tooltip(\n                  trigger = list(\n                    \"Mana Cost {B}{B}\",\n                    bsicons::bs_icon(\"info-circle\")\n                  ),\n                  \"e.g. Nether Traitor\"\n                )\n              ),\n              custom_autonumericInput(\n                inputId = \"enablers_ub\",\n                label = bslib::tooltip(\n                  trigger = list(\n                    \"Mana Cost {U}{B}\",\n                    bsicons::bs_icon(\"info-circle\")\n                  ),\n                  \"e.g. Satoru, the Infiltrator\"\n                )\n              )\n            ),\n            bslib::layout_columns(\n              col_widths = c(3, 3, 3, -3),\n              custom_autonumericInput(\n                inputId = \"enablers_1bb\",\n                label = bslib::tooltip(\n                  trigger = list(\n                    \"Mana Cost {1}{B}{B}\",\n                    bsicons::bs_icon(\"info-circle\")\n                  ),\n                  \"e.g. Nashi, Moon Sage's Scion\"\n                )\n              ),\n              custom_autonumericInput(\n                inputId = \"enablers_2u\",\n                label = bslib::tooltip(\n                  trigger = list(\n                    \"Mana Cost {2}{U}\",\n                    bsicons::bs_icon(\"info-circle\")\n                  ),\n                  \"e.g. Mist-Syndicate Naga\"\n                )\n              ),\n              custom_autonumericInput(\n                inputId = \"enablers_2b\",\n                label = bslib::tooltip(\n                  trigger = list(\n                    \"Mana Cost {2}{B}\",\n                    bsicons::bs_icon(\"info-circle\")\n                  ),\n                  \"e.g. Opposition Agent\"\n                )\n              )\n            )\n          ),\n          bslib::layout_columns(\n            bslib::card(\n              bslib::card_header(\"Lands\"),\n              custom_autonumericInput(\n                inputId = \"lands_c\",\n                label = bslib::tooltip(\n                  trigger = list(\n                    \"Only Produce {C}\",\n                    bsicons::bs_icon(\"info-circle\")\n                  ),\n                  \"e.g. Mutavault\"\n                )\n              ),\n              custom_autonumericInput(\n                inputId = \"lands_u\",\n                label = bslib::tooltip(\n                  trigger = list(\n                    \"Only Produce {U}\",\n                    bsicons::bs_icon(\"info-circle\")\n                  ),\n                  shiny::HTML(\"e.g. Island;<br>Otawara, the Soaring City\")\n                )\n              ),\n              custom_autonumericInput(\n                inputId = \"lands_b\",\n                label = bslib::tooltip(\n                  trigger = list(\n                    \"Only Produce {B}\",\n                    bsicons::bs_icon(\"info-circle\")\n                  ),\n                  shiny::HTML(\"e.g. Swamp;<br>Takenuma, Abandoned Mire\"),\n                  options = list(customClass = \"full-width\")\n                )\n              ),\n              custom_autonumericInput(\n                inputId = \"lands_ub\",\n                label = bslib::tooltip(\n                  trigger = list(\n                    \"Produce {U} or {B} (or Fetchlands)\",\n                    bsicons::bs_icon(\"info-circle\")\n                  ),\n                  \"e.g. Underground Sea; Polluted Delta\"\n                )\n              )\n            ),\n            bslib::card(\n              bslib::card_header(\"MDFC Cards\"),\n              custom_autonumericInput(\n                inputId = \"mdfc_enablers_2u\",\n                label = bslib::tooltip(\n                  trigger = list(\n                    \"MDFC Enabler with Mana Cost {2}{U}\",\n                    bsicons::bs_icon(\"info-circle\")\n                  ),\n                  \"e.g. Hydroelectric Specimen\"\n                )\n              ),\n              custom_autonumericInput(\n                inputId = \"mdfc_enablers_2b\",\n                label = bslib::tooltip(\n                  trigger = list(\n                    \"MDFC Enabler with Mana Cost {2}{B}\",\n                    bsicons::bs_icon(\"info-circle\")\n                  ),\n                  \"e.g. Boggart Trawler\"\n                )\n              ),\n              custom_autonumericInput(\n                inputId = \"mdfc_lands_b\",\n                label = bslib::tooltip(\n                  trigger = list(\n                    \"Non-Enabler MDFC that Only Produce {B}\",\n                    bsicons::bs_icon(\"info-circle\")\n                  ),\n                  \"e.g. Agadeem's Awakening\"\n                )\n              ),\n              custom_autonumericInput(\n                inputId = \"mdfc_lands_u\",\n                label = bslib::tooltip(\n                  trigger = list(\n                    \"Non-Enabler MDFC that Only Produce {U}\",\n                    bsicons::bs_icon(\"info-circle\")\n                  ),\n                  \"e.g. Sea Gate Restoration\"\n                )\n              )\n            ),\n            bslib::card(\n              bslib::card_header(\n                bslib::tooltip(\n                  trigger = list(\n                    \"Fast Mana\",\n                    bsicons::bs_icon(\"info-circle\")\n                  ),\n                  \"Select the cards that you want to include in the deck.\"\n                )\n              ),\n              shiny::checkboxInput(\n                inputId = \"include_dark_ritual\",\n                label = \"Dark Ritual\"\n              ),\n              shiny::checkboxInput(\n                inputId = \"include_chrome_mox\",\n                label = \"Chrome Mox\"\n              ),\n              shiny::checkboxInput(\n                inputId = \"include_lotus_petal\",\n                label = \"Lotus Petal\"\n              ),\n              shiny::checkboxInput(\n                inputId = \"include_mana_crypt\",\n                label = \"Mana Crypt\"\n              ),\n              shiny::checkboxInput(\n                inputId = \"include_mox_diamond\",\n                label = \"Mox Diamond\"\n              )\n            ),\n            bslib::card(\n              bslib::card_header(\n                bslib::tooltip(\n                  trigger = list(\n                    \"Other Cards\",\n                    bsicons::bs_icon(\"info-circle\")\n                  ),\n                  \"Allocate missing cards based on their color(s). This will only impact the simulation when Chrome Mox is in the deck.\"\n                )\n              ),\n              custom_autonumericInput(\n                inputId = \"others_c\",\n                label = bslib::tooltip(\n                  trigger = list(\n                    \"Colorless\",\n                    bsicons::bs_icon(\"info-circle\")\n                  ),\n                  \"e.g. Cursed Totem\"\n                )\n              ),\n              custom_autonumericInput(\n                inputId = \"others_u\",\n                label = bslib::tooltip(\n                  trigger = list(\n                    \"Mono {U}\",\n                    bsicons::bs_icon(\"info-circle\")\n                  ),\n                  \"e.g. Force of Will\"\n                )\n              ),\n              custom_autonumericInput(\n                inputId = \"others_b\",\n                label = bslib::tooltip(\n                  trigger = list(\n                    \"Mono {B}\",\n                    bsicons::bs_icon(\"info-circle\")\n                  ),\n                  \"e.g. Snuff Out\"\n                )\n              ),\n              custom_autonumericInput(\n                inputId = \"others_ub\",\n                label = bslib::tooltip(\n                  trigger = list(\n                    \"{U}{B}\",\n                    bsicons::bs_icon(\"info-circle\")\n                  ),\n                  \"e.g. Fallen Shinobi; Consign//Oblivion\"\n                )\n              )\n            )\n          )\n        ),\n        bslib::nav_panel(\n          title = \"Simulate\",\n          bslib::layout_sidebar(\n            sidebar = bslib::sidebar(\n              width = 400,\n              shiny::numericInput(\n                inputId = \"n_sim_from_counts\",\n                label = \"Number of Hands to Draw\",\n                min = 1000,\n                value = 1000,\n                step = 1\n              ),\n              shiny::actionButton(\n                inputId = \"simulate_from_counts\",\n                label = \"Run Simulation\"\n              )\n            ),\n            bslib::card(\n              bslib::card_header(\"Simulation Results\"),\n              shiny::uiOutput(\"simulation_summary_from_counts\")\n            )\n          )\n        )\n      )\n    ),\n    bslib::nav_panel(\n      title = \"About\"\n    )\n  )\n)\n","type":"text"},{"name":"global.R","content":"\n# ---- Start of app_utils.R ----\n\nbold_percentage <- function(value) {\n  shiny::strong(scales::label_percent(accuracy = 0.01)(value))\n}\n\nrender_card <- function(decklist, input, card_index, card_height = 250) {\n  shiny::renderUI({\n    img_src <- decklist |>\n      dplyr::filter(card_name_scryfall == input[[glue::glue(\"card{ card_index }\")]]) |> \n      dplyr::pull(img_src)\n    \n    shiny::tags$img(\n      src = img_src,\n      alt = glue::glue(\"card{ card_index }\"),\n      crossorigin = \"anonymous\",\n      height = card_height\n    )\n  })\n}\n\ncustom_autonumericInput <- function(inputId, label) {\n  shinyWidgets::autonumericInput(\n    inputId,\n    label,\n    value = 0,\n    decimalPlaces = 0,\n    emptyInputBehavior = \"0\",\n    width = \"100%\"\n  )\n}\n\n# ---- End of app_utils.R ----\n\n\n# ---- Start of decklist_from_counts.R ----\n\ndecklist_from_counts <- function(group_counts) {\n  \n  tibble::tibble(\n    group = rep(names(group_counts), times = unlist(group_counts))\n  ) |> \n    dplyr::left_join(get_group_attributes(), by = \"group\")\n  \n}\n\nget_group_attributes <- function() {\n  tibble::tribble(\n    ~group           , ~layout    , ~card_name_scryfall   , ~name        , ~cmc, ~mana_cost , ~type             , ~produced_mana,\n    \"enabler_0\"      , \"normal\"   , \"\"                    , \"\"           ,    0, \"{0}\"      , \"Creature\"        , \"\"            ,\n    \"enabler_b\"      , \"normal\"   , \"\"                    , \"\"           ,    1, \"{B}\"      , \"Creature\"        , \"\"            ,\n    \"enabler_u\"      , \"normal\"   , \"\"                    , \"\"           ,    1, \"{U}\"      , \"Creature\"        , \"\"            ,\n    \"enabler_c\"      , \"normal\"   , \"\"                    , \"\"           ,    1, \"{1}\"      , \"Creature\"        , \"\"            ,\n    \"enabler_bb\"     , \"normal\"   , \"\"                    , \"\"           ,    2, \"{B}{B}\"   , \"Creature\"        , \"\"            ,\n    \"enabler_uu\"     , \"normal\"   , \"\"                    , \"\"           ,    2, \"{U}{U}\"   , \"Creature\"        , \"\"            ,\n    \"enabler_ub\"     , \"normal\"   , \"\"                    , \"\"           ,    2, \"{U}{B}\"   , \"Creature\"        , \"\"            ,\n    \"enabler_1b\"     , \"normal\"   , \"\"                    , \"\"           ,    2, \"{1}{B}\"   , \"Creature\"        , \"\"            ,\n    \"enabler_1u\"     , \"normal\"   , \"\"                    , \"\"           ,    2, \"{1}{U}\"   , \"Creature\"        , \"\"            ,\n    \"enabler_cc\"     , \"normal\"   , \"\"                    , \"\"           ,    2, \"{2}\"      , \"Creature\"        , \"\"            ,\n    \"enabler_1bb\"    , \"normal\"   , \"\"                    , \"\"           ,    3, \"{1}{B}{B}\", \"Creature\"        , \"\"            ,\n    \"enabler_2b\"     , \"normal\"   , \"\"                    , \"\"           ,    3, \"{2}{B}\"   , \"Creature\"        , \"\"            ,\n    \"enabler_2u\"     , \"normal\"   , \"\"                    , \"\"           ,    3, \"{2}{U}\"   , \"Creature\"        , \"\"            ,\n    \"mdfc_enabler_2b\", \"modal_dfc\", \"\"                    , \"\"           ,    3, \"{2}{B}\"   , \"Creature // Land\", \"B\"           ,\n    \"mdfc_enabler_2u\", \"modal_dfc\", \"\"                    , \"\"           ,    3, \"{2}{U}\"   , \"Creature // Land\", \"U\"           ,\n    \"land_b\"         , \"normal\"   , \"\"                    , \"\"           ,    9, \"\"         , \"Land\"            , \"B\"           ,\n    \"land_u\"         , \"normal\"   , \"\"                    , \"\"           ,    9, \"\"         , \"Land\"            , \"U\"           ,\n    \"land_c\"         , \"normal\"   , \"\"                    , \"\"           ,    9, \"\"         , \"Land\"            , \"C\"           ,\n    \"land_ub\"        , \"normal\"   , \"\"                    , \"\"           ,    9, \"\"         , \"Land\"            , \"BU\"          ,\n    \"mdfc_land_b\"    , \"modal_dfc\", \"\"                    , \"\"           ,    9, \"{B}\"      , \"Instant // Land\" , \"B\"           ,\n    \"mdfc_land_u\"    , \"modal_dfc\", \"\"                    , \"\"           ,    9, \"{U}\"      , \"Instant // Land\" , \"U\"           ,\n    \"other_b\"        , \"normal\"   , \"\"                    , \"\"           ,    9, \"{B}\"      , \"\"                , \"\"            ,\n    \"other_u\"        , \"normal\"   , \"\"                    , \"\"           ,    9, \"{U}\"      , \"\"                , \"\"            ,\n    \"other_c\"        , \"normal\"   , \"\"                    , \"\"           ,    9, \"\"         , \"\"                , \"\"            ,\n    \"other_ub\"       , \"normal\"   , \"\"                    , \"\"           ,    9, \"{U}{B}\"   , \"\"                , \"\"            ,\n    \"dark_ritual\"    , \"normal\"   , \"Dark Ritual\"         , \"Dark Ritual\",    9, \"{B}\"      , \"\"                , \"\"            ,\n    \"chrome_mox\"     , \"normal\"   , \"Chrome Mox\"          , \"Chrome Mox\" ,    9, \"\"         , \"\"                , \"\"            ,\n    \"lotus_petal\"    , \"normal\"   , \"Lotus Petal\"         , \"Lotus Petal\",    9, \"\"         , \"\"                , \"\"            ,\n    \"mana_crypt\"     , \"normal\"   , \"Mana Crypt\"          , \"Mana Crypt\" ,    9, \"\"         , \"\"                , \"\"            ,\n    \"mox_diamond\"    , \"normal\"   , \"Mox Diamond\"         , \"Mox Diamond\",    9, \"\"         , \"\"                , \"\"            \n  ) |> \n    add_custom_attributes() |> \n    dplyr::select(\n      -layout,\n      -name,\n      -cmc,\n      -mana_cost,\n      -type,\n      -produced_mana\n    )\n}\n\n# ---- End of decklist_from_counts.R ----\n\n\n# ---- Start of hand_produces_1ub_T1.R ----\n\nhand_produces_1ub_T1 <- function(hand_metrics) {\n  if (hand_metrics$dark_ritual){\n    if (hand_metrics$lotus_petal){\n      if (hand_metrics$n_color_lands + hand_metrics$n_mdfc_lands >= 1) return(TRUE)\n      if (hand_metrics$mox_diamond & hand_metrics$n_lands >= 1) return(TRUE)\n      if (hand_metrics$chrome_mox & hand_metrics$n_cards_u + hand_metrics$n_cards_b >= 2) return(TRUE)\n    }\n    if (hand_metrics$chrome_mox){\n      if (hand_metrics$n_lands_b + hand_metrics$n_mdfc_lands_b >= 1){\n        if (hand_metrics$n_cards_u >= 1) return(TRUE)\n      }\n      if (hand_metrics$n_lands_u + hand_metrics$n_mdfc_lands_u >= 1){\n        if (hand_metrics$n_cards_b >= 2) return(TRUE)\n      }\n      if (hand_metrics$mox_diamond){\n        if (hand_metrics$n_lands >= 1 & hand_metrics$n_cards_u + hand_metrics$n_cards_b >= 2) return(TRUE)\n      }\n    }\n  }\n  \n  if (hand_metrics$lotus_petal){\n    if (hand_metrics$chrome_mox){\n      if (hand_metrics$n_lands >= 1 & hand_metrics$n_cards_b + hand_metrics$n_cards_u >= 1) return(TRUE)\n      if (hand_metrics$n_mdfc_lands >= 1 & hand_metrics$n_cards_b + hand_metrics$n_cards_u >= 2) return(TRUE)\n    }\n    if (hand_metrics$mox_diamond){\n      if (hand_metrics$n_lands >= 2) return(TRUE)\n      if (hand_metrics$n_lands == 1 & hand_metrics$mana_crypt) return(TRUE)\n    }\n  }\n  \n  if (hand_metrics$chrome_mox){\n    if (hand_metrics$n_lands >= 2){\n      if (hand_metrics$mox_diamond){\n        if (hand_metrics$n_cards_b + hand_metrics$n_cards_u >= 1) return(TRUE)\n      }\n      if (hand_metrics$mana_crypt){\n        if (hand_metrics$n_lands_b >= 1 & hand_metrics$n_cards_u >= 1) return(TRUE)\n        if (hand_metrics$n_lands_u >= 1 & hand_metrics$n_cards_b >= 1) return(TRUE)\n      }\n    }\n    if (hand_metrics$n_lands == 1){\n      if (hand_metrics$mox_diamond){\n        if (hand_metrics$n_mdfc_lands_b >= 1 & hand_metrics$n_cards_b + hand_metrics$n_cards_u >= 2) return(TRUE)\n        if (hand_metrics$n_mdfc_lands_u >= 1 & hand_metrics$n_cards_b + hand_metrics$n_cards_u >= 2) return(TRUE)\n        if (hand_metrics$mana_crypt & hand_metrics$n_cards_b + hand_metrics$n_cards_u >= 1) return(TRUE)\n      }\n      if (hand_metrics$mana_crypt){\n        if (hand_metrics$n_lands_b >= 1 & hand_metrics$n_cards_u >= 1) return(TRUE)\n        if (hand_metrics$n_lands_u >= 1 & hand_metrics$n_cards_b >= 1) return(TRUE)\n      }\n    }\n    if (hand_metrics$n_lands == 0){\n      if (hand_metrics$n_mdfc_lands >= 1){\n        if (hand_metrics$mana_crypt){\n          if (hand_metrics$n_mdfc_lands_b >= 1 & hand_metrics$n_cards_u >= 1) return(TRUE)\n          if (hand_metrics$n_mdfc_lands_u >= 1 & hand_metrics$n_cards_b >= 1) return(TRUE)\n        }\n      }\n    }\n  }\n  \n  if (hand_metrics$mana_crypt){\n    if (hand_metrics$lotus_petal){\n      if (hand_metrics$n_color_lands >= 1) return(TRUE)\n      if (hand_metrics$chrome_mox & hand_metrics$n_cards_b + hand_metrics$n_cards_u >= 1) return(TRUE)\n    }\n    if (hand_metrics$mox_diamond){\n      if (hand_metrics$n_lands >= 2 & hand_metrics$n_color_lands >= 1) return(TRUE)\n    }\n  }\n  \n  return(FALSE)\n}\n\n# ---- End of hand_produces_1ub_T1.R ----\n\n\n# ---- Start of hand_produces_ub_and_three_mana_T1.R ----\n\nhand_produces_ub_and_three_mana_T1 <- function(hand_metrics, constraint){\n  \n  if (constraint == \"U ON T1\"){\n    \n    n_lands_constraint_color     <- hand_metrics$n_lands_u\n    n_mdfc_lands_constraint_color <- hand_metrics$n_mdfc_lands_u\n    n_cards_constraint_color     <- hand_metrics$n_cards_u\n    \n    n_lands_other_color      <- hand_metrics$n_lands_b\n    n_mdfc_lands_other_color <- hand_metrics$n_mdfc_lands_b\n    n_cards_other_color      <- hand_metrics$n_cards_b\n    \n    \n  } else if (constraint == \"B ON T1\"){\n    \n    n_lands_constraint_color     <- hand_metrics$n_lands_b\n    n_mdfc_lands_constraint_color <- hand_metrics$n_mdfc_lands_b\n    n_cards_constraint_color     <- hand_metrics$n_cards_b\n    \n    n_lands_other_color      <- hand_metrics$n_lands_u\n    n_mdfc_lands_other_color <- hand_metrics$n_mdfc_lands_u\n    n_cards_other_color      <- hand_metrics$n_cards_u\n    \n  }\n  \n  if (hand_metrics$lotus_petal){\n    if (hand_metrics$chrome_mox){\n      if (n_cards_constraint_color >= 2){\n        if (hand_produces_ub(hand_metrics, use_lotus_petal = FALSE)) return(TRUE)\n      }\n      \n      if (n_cards_other_color >= 1){\n        if (hand_produces_ub_with_constraint(hand_metrics, constraint, use_lotus_petal = FALSE)) return(TRUE)\n      }\n      \n    }\n    \n    if (hand_metrics$mox_diamond){\n      if (hand_metrics$n_lands >= 2){\n        if (hand_metrics$n_color_lands >= 1) return(TRUE)\n        if (hand_metrics$n_mdfc_lands >= 1) return(TRUE)\n      }\n      if (hand_metrics$n_lands == 1){\n        if (hand_metrics$n_mdfc_lands >= 1) return(TRUE)\n      }\n    }\n  }\n  \n  if (hand_metrics$chrome_mox){\n    if (n_cards_constraint_color >= 2 | n_cards_other_color >= 1){\n      if (hand_metrics$mox_diamond){\n        if (hand_metrics$n_lands >= 2) return(TRUE)\n        if (hand_metrics$n_lands == 1 & hand_metrics$n_mdfc_lands >= 1) return(TRUE) \n      } \n    }\n  }\n  \n  if (hand_metrics$dark_ritual){\n    if (hand_produces_ub_and_two_mana_T1(hand_metrics, \"B ON T1\")) return(TRUE)\n  }\n\n  return(FALSE)\n}\n\n# ---- End of hand_produces_ub_and_three_mana_T1.R ----\n\n\n# ---- Start of hand_produces_ub_and_two_mana_T1.R ----\n\nhand_produces_ub_and_two_mana_T1 <- function(hand_metrics, constraint){\n  \n  if (constraint %in% c(\"U ON T1\", \"UU ON T1\")){\n    \n    n_lands_constraint_color     <- hand_metrics$n_lands_u\n    n_mdfc_lands_constraint_color <- hand_metrics$n_mdfc_lands_u\n    n_cards_constraint_color     <- hand_metrics$n_cards_u\n    \n    n_lands_other_color      <- hand_metrics$n_lands_b\n    n_mdfc_lands_other_color <- hand_metrics$n_mdfc_lands_b\n    n_cards_other_color      <- hand_metrics$n_cards_b\n    \n    \n  } else if (constraint %in% c(\"B ON T1\", \"BB ON T1\")){\n    \n    n_lands_constraint_color     <- hand_metrics$n_lands_b\n    n_mdfc_lands_constraint_color <- hand_metrics$n_mdfc_lands_b\n    n_cards_constraint_color     <- hand_metrics$n_cards_b\n    \n    n_lands_other_color      <- hand_metrics$n_lands_u\n    n_mdfc_lands_other_color <- hand_metrics$n_mdfc_lands_u\n    n_cards_other_color      <- hand_metrics$n_cards_u\n    \n  }\n  \n  if (hand_metrics$lotus_petal){\n    if (hand_produces_ub(hand_metrics, use_lotus_petal = FALSE)) return(TRUE)\n  }\n  \n  if (hand_metrics$chrome_mox){\n    if (n_cards_constraint_color >= 2){\n      if (hand_produces_ub(hand_metrics, use_lotus_petal = FALSE)) return(TRUE)\n    }\n    \n    if (n_cards_other_color >= 1 & !(constraint %in% c(\"UU ON T1\", \"BB ON T1\"))){\n      if (hand_produces_ub_with_constraint(hand_metrics, constraint, use_lotus_petal = FALSE)) return(TRUE)\n    }\n    \n  }\n\n  if (hand_metrics$mox_diamond){\n    if (hand_metrics$n_lands >= 2){\n      if (hand_metrics$n_color_lands >= 1) return(TRUE)\n      if (hand_metrics$n_mdfc_lands >= 1) return(TRUE)\n    }\n    if (hand_metrics$n_lands == 1){\n      if (constraint %in% c(\"U ON T1\", \"B ON T1\")) {\n        if (hand_metrics$n_mdfc_lands >= 1) return(TRUE)\n      }\n      if (constraint %in% c(\"UU ON T1\", \"BB ON T1\")) {\n        if (n_mdfc_lands_constraint_color >= 1) return(TRUE)\n      }\n    }\n  }\n  \n  return(FALSE)\n  \n}\n\n# ---- End of hand_produces_ub_and_two_mana_T1.R ----\n\n\n# ---- Start of hand_produces_ub_with_constraint.R ----\n\nhand_produces_ub_with_constraint <- function(hand_metrics, constraint, use_lotus_petal = TRUE, mdfc_enabler = FALSE){\n  if (constraint == \"U ON T1\"){\n    \n    n_lands_constraint_color     <- hand_metrics$n_lands_u\n    n_mdfc_lands_constraint_color <- hand_metrics$n_mdfc_lands_u\n    n_cards_constraint_color     <- hand_metrics$n_cards_u\n\n    n_lands_other_color      <- hand_metrics$n_lands_b\n    n_mdfc_lands_other_color <- hand_metrics$n_mdfc_lands_b\n    n_cards_other_color      <- hand_metrics$n_cards_b\n\n  } else if (constraint == \"B ON T1\"){\n    \n    n_lands_constraint_color     <- hand_metrics$n_lands_b\n    n_mdfc_lands_constraint_color <- hand_metrics$n_mdfc_lands_b\n    n_cards_constraint_color     <- hand_metrics$n_cards_b\n\n    n_lands_other_color      <- hand_metrics$n_lands_u\n    n_mdfc_lands_other_color <- hand_metrics$n_mdfc_lands_u\n    n_cards_other_color      <- hand_metrics$n_cards_u\n\n  }\n  \n  if (hand_metrics$n_lands >= 2){\n    \n    if (hand_metrics$n_color_lands >= 2){\n      if (hand_metrics$mox_diamond) return(TRUE)\n      if (use_lotus_petal & hand_metrics$lotus_petal){\n        if (n_lands_constraint_color     >= 1) return(TRUE)\n        if (n_mdfc_lands_constraint_color >= 1) return(TRUE)\n      }\n      if ((n_lands_constraint_color >= 1) & (n_lands_other_color >= 1)) return(TRUE)\n      if (n_lands_other_color == 0){\n        if (hand_metrics$chrome_mox & (n_cards_other_color >= 1)) return(TRUE)\n        if (n_mdfc_lands_other_color >= 1) return(TRUE)\n      }\n      if (n_lands_constraint_color == 0){\n        if (hand_metrics$chrome_mox & (n_cards_constraint_color >= 2)) return(TRUE)\n        if (n_mdfc_lands_constraint_color >= 1) return(TRUE)\n      }\n    }\n    \n    if (hand_metrics$n_color_lands == 1){\n      if (hand_metrics$mox_diamond) return(TRUE)\n      if (use_lotus_petal & hand_metrics$lotus_petal){\n        if (n_lands_constraint_color >= 1) return(TRUE)\n        if (n_mdfc_lands_constraint_color >= 1) return(TRUE)\n      }\n      if (n_lands_constraint_color == 1 & n_lands_other_color == 1 & hand_metrics$chrome_mox & (n_cards_constraint_color >= 2 | n_cards_other_color >= 1)) return(TRUE)\n      if (n_lands_constraint_color == 1 & n_lands_other_color == 1 & hand_metrics$n_mdfc_lands >= 1) return(TRUE)\n      if (n_lands_other_color == 0){\n        if (hand_metrics$chrome_mox & n_cards_other_color >= 1) return(TRUE)\n        if (n_mdfc_lands_other_color >= 1) return(TRUE)\n      }\n      if (n_lands_constraint_color == 0){\n        if (hand_metrics$chrome_mox & n_cards_constraint_color >= 2) return(TRUE)\n        if (n_mdfc_lands_constraint_color >= 1) return(TRUE)\n      }\n    }\n    \n    if (hand_metrics$n_color_lands == 0){\n      if (hand_metrics$n_mdfc_lands == 0){\n        if (hand_metrics$mox_diamond & hand_metrics$chrome_mox & (n_cards_constraint_color >= 2 | n_cards_other_color >= 1)) return(TRUE)\n      }\n      if (hand_metrics$n_mdfc_lands == 1){\n        if (hand_metrics$mox_diamond) return(TRUE)\n        if (use_lotus_petal & hand_metrics$lotus_petal & n_mdfc_lands_constraint_color >= 1) return(TRUE)\n        if (n_mdfc_lands_constraint_color >= 1 & hand_metrics$chrome_mox & n_cards_other_color >= 1) return(TRUE)\n        if (n_mdfc_lands_other_color >= 1 & hand_metrics$chrome_mox & n_cards_constraint_color >= 2) return(TRUE)\n      }\n      if (hand_metrics$n_mdfc_lands == 2){\n        if (n_mdfc_lands_constraint_color >= 1 & n_mdfc_lands_other_color >= 1) return(TRUE)\n      }\n    }\n  }\n  \n  if (hand_metrics$n_lands == 1){\n\n    if (hand_metrics$n_color_lands == 1){\n      if (use_lotus_petal & hand_metrics$lotus_petal){\n        if (n_lands_constraint_color >= 1) return(TRUE)\n        if (n_mdfc_lands_constraint_color >= 1) return(TRUE)\n        if (hand_metrics$mox_diamond) return(TRUE)\n      }\n      if (!mdfc_enabler & n_lands_constraint_color == 1 & n_lands_other_color == 1 & hand_metrics$n_mdfc_lands >= 1) return(TRUE)\n      if (mdfc_enabler & n_lands_constraint_color == 1 & n_lands_other_color == 1 & hand_metrics$n_mdfc_lands >= 2) return(TRUE)\n      if (n_lands_other_color == 1){\n        if (hand_metrics$chrome_mox & n_cards_constraint_color >= 2) return(TRUE)\n        if (!mdfc_enabler & n_mdfc_lands_constraint_color >= 1) return(TRUE)\n        if (mdfc_enabler & n_mdfc_lands_constraint_color >= 2) return(TRUE)\n        if (hand_metrics$mox_diamond & hand_metrics$n_mdfc_lands >= 1) return(TRUE)\n      }\n      if (n_lands_constraint_color == 1){\n        if (hand_metrics$chrome_mox & n_cards_other_color >= 1) return(TRUE)\n        if (n_mdfc_lands_other_color >= 1) return(TRUE)\n        if (hand_metrics$mox_diamond & hand_metrics$n_mdfc_lands >= 1) return(TRUE)\n      }\n    }\n    \n    if (hand_metrics$n_color_lands == 0){\n      if (n_mdfc_lands_constraint_color >= 1 & n_mdfc_lands_other_color >= 1) return(TRUE)\n      if (hand_metrics$mox_diamond){\n        if (hand_metrics$chrome_mox & (n_cards_constraint_color >= 2 | n_cards_other_color >= 1)) return(TRUE)\n        if (hand_metrics$n_mdfc_lands >= 1) return(TRUE)\n        if (use_lotus_petal & hand_metrics$lotus_petal) return(TRUE)\n      }\n      if (n_mdfc_lands_constraint_color >= 1 & hand_metrics$chrome_mox & n_cards_other_color >= 1) return(TRUE)\n      if (n_mdfc_lands_other_color >= 1 & hand_metrics$chrome_mox & n_cards_constraint_color >= 2) return(TRUE)\n      if (use_lotus_petal & hand_metrics$lotus_petal & n_mdfc_lands_constraint_color >= 1) return(TRUE)\n    }\n  }\n  \n  if (hand_metrics$n_lands == 0){\n    if (use_lotus_petal & hand_metrics$lotus_petal & hand_metrics$chrome_mox & (n_cards_constraint_color >= 2 | n_cards_other_color >= 1)) return(TRUE)\n    if (use_lotus_petal & hand_metrics$lotus_petal & n_mdfc_lands_constraint_color >= 1) return(TRUE)\n    if (n_mdfc_lands_constraint_color >= 1 & hand_metrics$chrome_mox & n_cards_other_color >= 1) return(TRUE)\n    if (n_mdfc_lands_other_color >= 1 & hand_metrics$chrome_mox & n_cards_constraint_color >= 2) return(TRUE)\n    if (n_mdfc_lands_constraint_color >= 1 & n_mdfc_lands_other_color >= 1) return(TRUE)\n  }\n  \n  return(FALSE)\n}\n\n# ---- End of hand_produces_ub_with_constraint.R ----\n\n\n# ---- Start of hand_produces_ub.R ----\n\nhand_produces_ub <- function(hand_metrics, use_lotus_petal = TRUE){\n  if (hand_metrics$n_lands >= 2){\n    \n    if (hand_metrics$n_color_lands >= 2){\n      if (hand_metrics$mox_diamond) return(TRUE)\n      if (use_lotus_petal & hand_metrics$lotus_petal) return(TRUE)\n      if ((hand_metrics$n_lands_u >= 1) & (hand_metrics$n_lands_b >= 1)) return(TRUE)\n      if (hand_metrics$n_lands_b == 0){\n        if (hand_metrics$chrome_mox & (hand_metrics$n_cards_b >= 1)) return(TRUE)\n        if (hand_metrics$n_mdfc_lands_b >= 1) return(TRUE)\n      }\n      if (hand_metrics$n_lands_u == 0){\n        if (hand_metrics$chrome_mox & (hand_metrics$n_cards_u >= 1)) return(TRUE)\n        if (hand_metrics$n_mdfc_lands_u >= 1) return(TRUE)\n      }\n    }\n    \n    if (hand_metrics$n_color_lands == 1){\n      if (hand_metrics$mox_diamond) return(TRUE)\n      if (use_lotus_petal & hand_metrics$lotus_petal) return(TRUE)\n      if (hand_metrics$n_lands_u == 1 & hand_metrics$n_lands_b == 1 & hand_metrics$chrome_mox & (hand_metrics$n_cards_u >= 1 | hand_metrics$n_cards_b >= 1)) return(TRUE)\n      if (hand_metrics$n_lands_u == 1 & hand_metrics$n_lands_b == 1 & hand_metrics$n_mdfc_lands >= 1) return(TRUE)\n      if (hand_metrics$n_lands_b == 0){\n        if (hand_metrics$chrome_mox & hand_metrics$n_cards_b >= 1) return(TRUE)\n        if (hand_metrics$n_mdfc_lands_b >= 1) return(TRUE)\n      }\n      if (hand_metrics$n_lands_u == 0){\n        if (hand_metrics$chrome_mox & hand_metrics$n_cards_u >= 1) return(TRUE)\n        if (hand_metrics$n_mdfc_lands_u >= 1) return(TRUE)\n      }\n    }\n    \n    if (hand_metrics$n_color_lands == 0){\n      if (hand_metrics$n_mdfc_lands == 0){\n        if (hand_metrics$mox_diamond & hand_metrics$chrome_mox & (hand_metrics$n_cards_u >= 1 | hand_metrics$n_cards_b >= 1)) return(TRUE)\n      }\n      if (hand_metrics$n_mdfc_lands == 1){\n        if (hand_metrics$mox_diamond) return(TRUE)\n        if (use_lotus_petal & hand_metrics$lotus_petal) return(TRUE)\n        if (hand_metrics$n_mdfc_lands_u >= 1 & hand_metrics$chrome_mox & hand_metrics$n_cards_b >= 1) return(TRUE)\n        if (hand_metrics$n_mdfc_lands_b >= 1 & hand_metrics$chrome_mox & hand_metrics$n_cards_u >= 1) return(TRUE)\n      }\n      if (hand_metrics$n_mdfc_lands == 2){\n        if (hand_metrics$n_mdfc_lands_u >= 1 & hand_metrics$n_mdfc_lands_b >= 1) return(TRUE)\n      }\n    }\n  }\n  \n  if (hand_metrics$n_lands == 1){\n    \n    if (hand_metrics$n_color_lands == 1){\n      if (use_lotus_petal & hand_metrics$lotus_petal) return(TRUE)\n      if (hand_metrics$n_lands_u == 1 & hand_metrics$n_lands_b == 1 & hand_metrics$n_mdfc_lands >= 1) return(TRUE)\n      if (hand_metrics$n_lands_b == 1){\n        if (hand_metrics$chrome_mox){\n          if (hand_metrics$n_cards_u >= 1) return(TRUE)\n          if (hand_metrics$n_cards_b >= 1 & hand_metrics$mox_diamond) return(TRUE)\n        }\n        \n        if (hand_metrics$n_mdfc_lands_u >= 1) return(TRUE)\n        if (hand_metrics$mox_diamond & hand_metrics$n_mdfc_lands >= 1) return(TRUE)\n      }\n      if (hand_metrics$n_lands_u == 1){\n        if (hand_metrics$chrome_mox){\n          if (hand_metrics$n_cards_b >= 1) return(TRUE)\n          if (hand_metrics$n_cards_u >= 1 & hand_metrics$mox_diamond) return(TRUE)\n        }\n        \n        if (hand_metrics$n_mdfc_lands_b >= 1) return(TRUE)\n        if (hand_metrics$mox_diamond & hand_metrics$n_mdfc_lands >= 1) return(TRUE)\n      }\n    }\n    \n    if (hand_metrics$n_color_lands == 0){\n      if (hand_metrics$n_mdfc_lands_u >= 1 & hand_metrics$n_mdfc_lands_b >= 1) return(TRUE)\n      if (hand_metrics$mox_diamond){\n        if (hand_metrics$chrome_mox & (hand_metrics$n_cards_u >= 1 | hand_metrics$n_cards_b >= 1)) return(TRUE)\n        if (hand_metrics$n_mdfc_lands >= 1) return(TRUE)\n      }\n      if (hand_metrics$n_mdfc_lands_u >= 1 & hand_metrics$chrome_mox & hand_metrics$n_cards_b >= 1) return(TRUE)\n      if (hand_metrics$n_mdfc_lands_b >= 1 & hand_metrics$chrome_mox & hand_metrics$n_cards_u >= 1) return(TRUE)\n      if (use_lotus_petal & hand_metrics$lotus_petal & hand_metrics$n_mdfc_lands >= 1) return(TRUE)\n    }\n  }\n  \n  if (hand_metrics$n_lands == 0){\n    if (use_lotus_petal & hand_metrics$lotus_petal & hand_metrics$chrome_mox & (hand_metrics$n_cards_u >= 1 | hand_metrics$n_cards_b >= 1)) return(TRUE)\n    if (use_lotus_petal & hand_metrics$lotus_petal & hand_metrics$n_mdfc_lands >= 1) return(TRUE)\n    if (hand_metrics$n_mdfc_lands_u >= 1 & hand_metrics$chrome_mox & hand_metrics$n_cards_b >= 1) return(TRUE)\n    if (hand_metrics$n_mdfc_lands_b >= 1 & hand_metrics$chrome_mox & hand_metrics$n_cards_u >= 1) return(TRUE)\n    if (hand_metrics$n_mdfc_lands_u >= 1 & hand_metrics$n_mdfc_lands_b >= 1) return(TRUE)\n  }\n  \n  return(FALSE)\n}\n\n# ---- End of hand_produces_ub.R ----\n\n\n# ---- Start of is_yuriko_on_T2.R ----\n\n#' @export\nis_yuriko_on_T2 <- function(opening_hand){\n\n  # TODO: Add parameter to indicate whether we are playing first\n  # TODO: Add logic to account for Gemstone Caverns when we are not playing first\n\n  hand_metrics <- summarise_hand(opening_hand)\n\n  if (hand_metrics$n_enablers >= 1){\n    \n    # ENABLER 0 ####\n    if (hand_metrics$n_enablers_0 >= 1){\n      if (hand_produces_ub(hand_metrics)) return(TRUE)\n    }\n    \n    # ENABLER 1 ####\n    if (hand_metrics$n_enablers_1 >= 1){\n      \n      # > COLORLESS ####\n      if (hand_metrics$n_enablers_c >= 1){\n        if (hand_produces_ub(hand_metrics)) return(TRUE)\n      }\n      \n      # > BLUE ####\n      if (hand_metrics$n_enablers_u >= 1){\n        if (hand_produces_ub_with_constraint(hand_metrics, \"U ON T1\")) return(TRUE)\n      }\n      \n      # > BLACK ####\n      if (hand_metrics$n_enablers_b >= 1){\n        if (hand_produces_ub_with_constraint(hand_metrics, \"B ON T1\")) return(TRUE)\n      }\n      \n    }\n    \n    # ENABLER 2 ####\n    if (hand_metrics$n_enablers_2 >= 1){\n      \n      # > 1U ####\n      if (hand_metrics$n_enablers_1u >= 1){\n        if (hand_metrics$mana_crypt){\n          if (hand_produces_ub_with_constraint(hand_metrics, \"U ON T1\")) return(TRUE)\n        }\n        \n        if (hand_produces_ub_and_two_mana_T1(hand_metrics, \"U ON T1\")) return(TRUE)\n        \n      }\n      \n      # > 1B ####\n      if (hand_metrics$n_enablers_1b >= 1){\n        if (hand_metrics$mana_crypt){\n          if (hand_produces_ub_with_constraint(hand_metrics, \"B ON T1\")) return(TRUE)\n        }\n        \n        if (hand_produces_ub_and_two_mana_T1(hand_metrics, \"B ON T1\")) return(TRUE)\n        \n        if (hand_metrics$dark_ritual){\n          if (hand_produces_ub_with_constraint(hand_metrics, \"B ON T1\")) return(TRUE)\n        }\n      }\n      \n      # > UU ####\n      if (hand_metrics$n_enablers_uu >= 1){\n        if (hand_produces_ub_and_two_mana_T1(hand_metrics, \"UU ON T1\")) return(TRUE)\n      }\n      \n      # > BB ####\n      if (hand_metrics$n_enablers_bb >= 1){\n        if (hand_produces_ub_and_two_mana_T1(hand_metrics, \"BB ON T1\")) return(TRUE)\n        \n        if (hand_metrics$dark_ritual){\n          if (hand_produces_ub_with_constraint(hand_metrics, \"B ON T1\")) return(TRUE)\n        }\n      }\n      \n      # > UB ####\n      if (hand_metrics$n_enablers_ub >= 1){\n        if (\n          hand_produces_ub_and_two_mana_T1(hand_metrics, \"B ON T1\") |\n          hand_produces_ub_and_two_mana_T1(hand_metrics, \"U ON T1\")\n          ) return(TRUE)\n      }\n      \n      # > COLORLESS ####\n      if (hand_metrics$n_enablers_cc >= 1){\n        if (hand_metrics$mana_crypt) {\n          if (hand_produces_ub(hand_metrics)) return(TRUE)\n        }\n        \n        if (\n          hand_produces_ub_and_two_mana_T1(hand_metrics, \"B ON T1\") |\n          hand_produces_ub_and_two_mana_T1(hand_metrics, \"U ON T1\")\n        ) return(TRUE)\n        \n      }\n      \n    }\n    # ENABLER 3 ####\n    if (hand_metrics$n_enablers_3 >= 1){\n      \n      # > 1BB ####\n      if (hand_metrics$n_enablers_1bb >= 1){\n        if (hand_metrics$dark_ritual){\n          if (hand_produces_ub_with_constraint(hand_metrics, \"B ON T1\")) return(TRUE)\n        }\n        \n        \n      }\n      \n      # > 2U ####\n      if (hand_metrics$n_enablers_2u >= 1){\n        if (hand_metrics$mana_crypt){\n          if (hand_produces_ub_with_constraint(hand_metrics, \"U ON T1\")) return(TRUE)\n        }\n        \n        if(hand_produces_ub_and_three_mana_T1(hand_metrics, \"U ON T1\")) return(TRUE)\n        \n        \n      }\n      \n      # > MDFC 2U ####\n      if (hand_metrics$n_mdfc_enablers_2u >= 1){\n        if (hand_metrics$mana_crypt){\n          if (hand_produces_ub_with_constraint(hand_metrics, \"U ON T1\", mdfc_enabler = TRUE)) return(TRUE)\n        }\n        \n        if(hand_produces_ub_and_three_mana_T1(hand_metrics, \"U ON T1\")) return(TRUE)\n        \n        \n      }\n      \n      # > 2B ####\n      if (hand_metrics$n_enablers_2b >= 1){\n        \n        if (hand_metrics$mana_crypt){\n          if (hand_produces_ub_with_constraint(hand_metrics, \"B ON T1\")) return(TRUE)\n        }\n        \n        if (hand_metrics$dark_ritual){\n          if (hand_produces_ub_with_constraint(hand_metrics, \"B ON T1\")) return(TRUE)\n        }\n        \n        if(hand_produces_ub_and_three_mana_T1(hand_metrics, \"B ON T1\")) return(TRUE)\n        \n      }\n      \n      # > MDFC 2B ####\n      if (hand_metrics$n_mdfc_enablers_2b >= 1){\n        if (hand_metrics$mana_crypt){\n          if (hand_produces_ub_with_constraint(hand_metrics, \"B ON T1\", mdfc_enabler = TRUE)) return(TRUE)\n        }\n        \n        if (hand_metrics$dark_ritual){\n          if (hand_produces_ub_with_constraint(hand_metrics, \"B ON T1\")) return(TRUE)\n        }\n        \n        if(hand_produces_ub_and_three_mana_T1(hand_metrics, \"B ON T1\")) return(TRUE)\n        \n      }\n\n    }\n  }\n\n  # YURIKO T1 ####\n  if (hand_produces_1ub_T1(hand_metrics)) return(TRUE)\n\n  return(FALSE)\n}\n\n# ---- End of is_yuriko_on_T2.R ----\n\n\n# ---- Start of process_card_data.R ----\n\n#' @export\nprocess_card_data <- function(decklist_source, source_path, use_httr) {\n  parse_decklist(decklist_source, source_path) |> \n    add_scryfall_data(use_httr) |> \n    add_custom_attributes()\n}\n\nparse_decklist <- function(decklist_source, source_path) {\n  \n  if (decklist_source == \"moxfield_url\") {\n    \n    moxfield_json <- source_path |> \n      stringr::str_replace(\"https://www.moxfield.com/decks\", \"https://api.moxfield.com/v2/decks/all\") |> \n      jsonlite::fromJSON(flatten = TRUE)\n    \n    tibble::tibble(\n      card_name_source = names(moxfield_json$mainboard) |> sort()\n    )\n    \n  } else if (decklist_source == \"file\") {\n    \n    # Read cards into a character vector\n    cards <- readLines(source_path, warn = FALSE)\n    \n    # TODO: Error handler when the file is not structured correctly\n    \n    # Find the index of the last card in the main deck\n    index_last_card_in_main_deck <- which(cards == \"\")[[1]] - 1\n    \n    # Remove all cards that are not part of the main deck\n    cards <- cards[seq_len(index_last_card_in_main_deck)]\n    \n    cards_as_tibble <- cards |> \n      # Convert to tibble\n      tibble::tibble() |> \n      # Separate into n_cards and card_name columns\n      tidyr::separate(\n        col = \"cards\",\n        into = c(\"n_cards\", \"card_name_source\"),\n        sep = \" \",\n        extra = \"merge\",\n        convert = TRUE\n      )\n\n  }\n  \n}\n\nadd_scryfall_data <- function(card_data, use_httr) {\n\n  # Initialize an empty list to store the data\n  scryfall_data <- list()\n\n  # Extract card names from the input data\n  card_names <- card_data |>\n    dplyr::pull(card_name_source)\n\n  # Initialize progress bar\n  cli::cli_progress_bar(\"Processing Decklist...\", total = nrow(card_data), format = paste0(\"ETA:{cli::pb_eta}\"))\n  \n  # Iterate over each card\n  for (card_index in seq_along(card_names)) {\n    card_name_source <- card_names[card_index]\n\n    # Wait between requests to the API\n    Sys.sleep(0.1)\n\n    if (use_httr) {\n\n      # API endpoint and query parameters\n      url <- \"https://api.scryfall.com/cards/named\"\n      query_params <- list(exact = card_name_source)\n\n      # Make GET request to Scryfall API\n      response <- httr::GET(url, query = query_params)\n\n      # Parse JSON content\n      card_info <- response |>\n        httr::content(as = \"text\") |> \n        jsonlite::fromJSON(flatten = TRUE)\n      \n    } else {\n\n      # httr does not work with shinylive\n      temp_card_json <- tempfile(pattern = \"card\", fileext = \".json\")\n\n      # Format card name for URL\n      card_name_for_url <- card_name_source |> \n        stringr::str_replace_all(\" \", \"%20\") |> \n        stringr::str_replace_all(\"/\", \"%20\")\n\n      url <- glue::glue(\"https://api.scryfall.com/cards/named?exact={ card_name_for_url }\")\n\n      # Download the JSON file\n      download.file(url, temp_card_json)\n\n      # Parse JSON content\n      card_info <- temp_card_json |> \n        jsonlite::fromJSON(flatten = TRUE)\n\n    }\n\n    # Process card data based on layout type\n    if (card_info$layout %in% c(\"split\", \"flip\", \"adventure\", \"normal\")) {\n      card_index_scryfall_data <- tibble::tibble(\n        card_name_source = card_name_source,\n        layout = card_info$layout,\n        card_name_scryfall = card_info$name,\n        cmc = card_info$cmc,\n        mana_cost = card_info$mana_cost,\n        type = card_info$type_line,\n        produced_mana = paste0(card_info$produced_mana, collapse = \"\"),\n        img_src = card_info$image_uris$png\n      )\n    }\n\n    if (card_info$layout %in% c(\"transform\")) {\n      card_index_scryfall_data <- tibble::tibble(\n        card_name_source = card_name_source,\n        layout = card_info$layout,\n        card_name_scryfall = card_info$name,\n        cmc = card_info$cmc,\n        mana_cost = paste0(card_info$card_faces$mana_cost[[1]], collapse = \"\"),\n        type = card_info$type_line,\n        produced_mana = paste0(card_info$produced_mana, collapse = \"\"),\n        img_src = card_info$card_faces$image_uris.png[[1]]\n      )\n    }\n\n    if (card_info$layout == \"modal_dfc\") {\n      card_index_scryfall_data <- tibble::tibble(\n        card_name_source = card_name_source,\n        layout = card_info$layout,\n        card_name_scryfall = card_info$name,\n        cmc = card_info$cmc,\n        mana_cost = paste0(card_info$card_faces$mana_cost, collapse = \" // \"),\n        type = paste0(card_info$card_faces$type_line, collapse = \" // \"),\n        produced_mana = paste0(card_info$produced_mana, collapse = \"\"),\n        img_src = card_info$card_faces$image_uris.png[[1]]\n      )\n    }\n\n    # TODO: add logic for \"prototype\" layout\n\n    # Add the processed card data to the list\n    scryfall_data[[card_index]] <- card_index_scryfall_data\n\n    # Update the progress bar\n    cli::cli_progress_update()\n\n  }\n\n  # Combine all individual card dataframes into one\n  scryfall_data <- dplyr::bind_rows(scryfall_data)\n\n  # Mark progress as complete\n  cli::cli_progress_done()\n\n  return(scryfall_data)\n\n}\n\nadd_custom_attributes <- function(card_data) {\n\n  card_data |>\n    edit_scryfall_data() |> \n    dplyr::mutate(\n\n      enabler = is_enabler(cmc, type),\n\n      # Enabler cmc\n      enabler_0 = is_enabler_0(enabler, mana_cost),\n      enabler_1 = is_enabler_1(enabler, cmc, mana_cost),      \n      enabler_2 = is_enabler_2(enabler, cmc),\n      enabler_3 = is_enabler_3(enabler, cmc),\n\n      # Enabler mana cost (non-mdfc)\n      enabler_c = is_enabler_c(enabler_1, mana_cost),\n      enabler_u = is_enabler_u(enabler_1, mana_cost),\n      enabler_b = is_enabler_b(enabler_1, mana_cost),\n\n      enabler_cc = is_enabler_cc(enabler_2, mana_cost),\n      enabler_1u = is_enabler_1u(enabler_2, mana_cost),\n      enabler_1b = is_enabler_1b(enabler_2, mana_cost),\n      enabler_uu = is_enabler_uu(enabler_2, mana_cost),\n      enabler_bb = is_enabler_bb(enabler_2, mana_cost),\n      enabler_ub = is_enabler_ub(enabler_2, mana_cost),\n\n      enabler_1bb = is_enabler_1bb(enabler_3, mana_cost),\n\n      enabler_2u  = is_enabler_2u(layout, enabler_3, mana_cost),\n      enabler_2b  = is_enabler_2b(layout, enabler_3, mana_cost),\n\n      # Enabler mana cost (mdfc)\n      mdfc_enabler_2u = is_mdfc_enabler_2u(layout, enabler_3, mana_cost),\n      mdfc_enabler_2b = is_mdfc_enabler_2b(layout, enabler_3, mana_cost),\n\n      # Card color\n      color_u = is_color_u(mana_cost),\n      color_b = is_color_b(mana_cost),\n\n      # Lands (non-mdfc)\n      land = is_land(type),\n      color_land = is_color_land(land, produced_mana),\n      land_u = is_land_u(color_land, produced_mana),\n      land_b = is_land_b(color_land, produced_mana),\n\n      # Lands (mdfc)\n      mdfc_land = is_mdfc_land(layout, type),\n      mdfc_land_u = is_mdfc_land_u(mdfc_land, produced_mana),\n      mdfc_land_b = is_mdfc_land_b(mdfc_land, produced_mana),\n\n      # Cards that require additional logic\n      chrome_mox = card_name_scryfall == \"Chrome Mox\",\n      dark_ritual = card_name_scryfall == \"Dark Ritual\",\n      lotus_petal = card_name_scryfall == \"Lotus Petal\",\n      mana_crypt = card_name_scryfall == \"Mana Crypt\",\n      mox_diamond = card_name_scryfall == \"Mox Diamond\"\n\n    )\n}\n\nedit_scryfall_data <- function(card_data) {\n\n  # For simplicity, we assume that we are playing first\n  # which means Gemstone Caverns produces only colorless mana\n  if (\"Gemstone Caverns\" %in% card_data$card_name_scryfall) {\n    card_data <- card_data |> \n      dplyr::mutate(\n        produced_mana = ifelse(\n          test = card_name_scryfall == \"Gemstone Caverns\",\n          yes = \"C\",\n          no = produced_mana\n        )\n      )\n  }\n  \n  # With Demonic Tutor we can tutor an Enabler with MV = 0\n  # So we can consider Demonic Tutor as an Enabler that costs 1B\n  # (for which logic was already defined)\n  if (\"Demonic Tutor\" %in% card_data$card_name_scryfall) {\n    card_data <- card_data |> \n      dplyr::mutate(\n        type = ifelse(\n          test = card_name_scryfall == \"Demonic Tutor\",\n          yes = \"Creature // Sorcery\",\n          no = type\n        )\n      )\n  }\n  \n  card_data\n\n}\n\n# ---- End of process_card_data.R ----\n\n\n# ---- Start of run_simulation.R ----\n\n#' @export\nrun_simulation <- function(decklist, fixed_cards = NULL, seed = 2611, n_sim) {\n  # Set seet for reproducibility\n  set.seed(seed)\n  \n  # Initialize count of yuriko triggers on turn two\n  n_yuriko_triggers_on_turn_two <- 0\n  \n  # Initialize progress bar\n  cli::cli_progress_bar(\"Running Simulation...\", total = n_sim, format = paste0(\"ETA:{cli::pb_eta}\"))\n  \n  # Simulate...\n  for (i in 1:n_sim) {\n    \n    hand <- draw_seven(decklist, fixed_cards)\n    \n    if (is_yuriko_on_T2(hand)) n_yuriko_triggers_on_turn_two = n_yuriko_triggers_on_turn_two + 1\n    \n    cli::cli_progress_update()\n    \n  }\n  \n  cli::cli_progress_done()\n\n  prob_yuriko_triggers_on_turn_two <- n_yuriko_triggers_on_turn_two / n_sim\n  \n  return(prob_yuriko_triggers_on_turn_two)\n  \n}\n\n# ---- End of run_simulation.R ----\n\n\n# ---- Start of summarise_hand.R ----\n\nsummarise_hand <- function(opening_hand){\n  list(\n    \"n_lands\"        = opening_hand$land        |> sum(),\n    \"n_color_lands\"  = opening_hand$color_land  |> sum(),\n    \"n_lands_u\"      = opening_hand$land_u      |> sum(),\n    \"n_lands_b\"      = opening_hand$land_b      |> sum(),\n    \"n_mdfc_lands\"   = opening_hand$mdfc_land   |> sum(),\n    \"n_mdfc_lands_u\" = opening_hand$mdfc_land_u |> sum(),\n    \"n_mdfc_lands_b\" = opening_hand$mdfc_land_b |> sum(),\n    \n    \"n_enablers\"   = opening_hand$enabler   |> sum(),\n    \"n_enablers_0\" = opening_hand$enabler_0 |> sum(),\n    \"n_enablers_1\" = opening_hand$enabler_1 |> sum(),\n    \"n_enablers_2\" = opening_hand$enabler_2 |> sum(),\n    \"n_enablers_3\" = opening_hand$enabler_3 |> sum(),\n\n    \"n_enablers_c\" = opening_hand$enabler_c |> sum(),\n    \"n_enablers_u\" = opening_hand$enabler_u |> sum(),\n    \"n_enablers_b\" = opening_hand$enabler_b |> sum(),\n\n    \"n_enablers_cc\" = opening_hand$enabler_cc |> sum(),\n    \"n_enablers_1u\" = opening_hand$enabler_1u |> sum(),\n    \"n_enablers_1b\" = opening_hand$enabler_1b |> sum(),\n    \"n_enablers_uu\" = opening_hand$enabler_uu |> sum(),\n    \"n_enablers_bb\" = opening_hand$enabler_bb |> sum(),\n    \"n_enablers_ub\" = opening_hand$enabler_ub |> sum(),\n    \n    \"n_enablers_1bb\" = opening_hand$enabler_1bb |> sum(),\n\n    \"n_enablers_2u\" = opening_hand$enabler_2u |> sum(),\n    \"n_enablers_2b\" = opening_hand$enabler_2b |> sum(),\n    \n    \"n_mdfc_enablers_2u\" = opening_hand$mdfc_enabler_2u |> sum(),\n    \"n_mdfc_enablers_2b\" = opening_hand$mdfc_enabler_2b |> sum(),\n\n    \"n_cards_u\" = opening_hand$color_u |> sum(),\n    \"n_cards_b\" = opening_hand$color_b |> sum(),\n\n    \"chrome_mox\"  = opening_hand$chrome_mox  |> sum(),\n    \"dark_ritual\" = opening_hand$dark_ritual |> sum(),\n    \"lotus_petal\" = opening_hand$lotus_petal |> sum(),\n    \"mana_crypt\"  = opening_hand$mana_crypt  |> sum(),\n    \"mox_diamond\" = opening_hand$mox_diamond |> sum()\n  )\n}\n\n# ---- End of summarise_hand.R ----\n\n\n# ---- Start of utils-add_custom_attributes.R ----\n\n# ENABLERS ####\n\n# TODO: add logic for enablers that use phyrexian mana\n\nis_enabler <- function(cmc, type) {\n  cmc <= 3 & grepl(\"Creature\", type)\n}\n\n# > CMC = 0 ####\nis_enabler_0 <- function(is_enabler, mana_cost) {\n  is_enabler & mana_cost == \"{0}\"\n}\n\n# > CMC = 1 ####\nis_enabler_1 <- function(is_enabler, cmc, mana_cost) {\n  is_enabler & (cmc == 1 | mana_cost == \"{X}\")\n}\n\nis_enabler_c <- function(is_enabler_1, mana_cost) {\n  is_enabler_1 & mana_cost %in% c(\"{1}\", \"{X}\")\n}\n\nis_enabler_u <- function(is_enabler_1, mana_cost) {\n  is_enabler_1 & grepl(\"{U}\", mana_cost, fixed = TRUE)\n}\n\nis_enabler_b <- function(is_enabler_1, mana_cost) {\n  is_enabler_1 & grepl(\"{B}\", mana_cost, fixed = TRUE)\n}\n\n# > CMC = 2 ####\nis_enabler_2 <- function(is_enabler, cmc) {\n  is_enabler & cmc == 2\n}\n\nis_enabler_cc <- function(is_enabler_2, mana_cost) {\n  is_enabler_2 & grepl(\"{2}\", mana_cost, fixed = TRUE)\n}\n\nis_enabler_1u <- function(is_enabler_2, mana_cost) {\n  is_enabler_2 & grepl(\"{1}{U}\", mana_cost, fixed = TRUE)\n}\n\nis_enabler_1b <- function(is_enabler_2, mana_cost) {\n  is_enabler_2 & grepl(\"{1}{B}\", mana_cost, fixed = TRUE)\n}\n\nis_enabler_uu <- function(is_enabler_2, mana_cost) {\n  is_enabler_2 & grepl(\"{U}{U}\", mana_cost, fixed = TRUE)\n}\n\nis_enabler_bb <- function(is_enabler_2, mana_cost) {\n  is_enabler_2 & grepl(\"{B}{B}\", mana_cost, fixed = TRUE)\n}\n\nis_enabler_ub <- function(is_enabler_2, mana_cost) {\n  is_enabler_2 & grepl(\"{U}{B}\", mana_cost, fixed = TRUE)\n}\n\n# > CMC = 3 ####\nis_enabler_3 <- function(is_enabler, cmc) {\n  is_enabler & cmc == 3\n}\n\nis_enabler_1bb <- function(is_enabler_3, mana_cost) {\n  is_enabler_3 & grepl(\"{1}{B}{B}\", mana_cost, fixed = TRUE)\n}\n\nis_enabler_2u <- function(layout, is_enabler_3, mana_cost) {\n  layout != \"modal_dfc\" & is_enabler_3 & grepl(\"{2}{U}\", mana_cost, fixed = TRUE)\n}\n\nis_enabler_2b <- function(layout, is_enabler_3, mana_cost) {\n  layout != \"modal_dfc\" & is_enabler_3 & grepl(\"{2}{B}\", mana_cost, fixed = TRUE)\n}\n\nis_mdfc_enabler_2u <- function(layout, is_enabler_3, mana_cost) {\n  layout == \"modal_dfc\" & is_enabler_3 & grepl(\"{2}{U}\", mana_cost, fixed = TRUE)\n}\n\nis_mdfc_enabler_2b <- function(layout, is_enabler_3, mana_cost) {\n  layout == \"modal_dfc\" & is_enabler_3 & grepl(\"{2}{B}\", mana_cost, fixed = TRUE)\n}\n\n# COLOR IDENTITY ####\nis_color_u <- function(mana_cost) {\n  grepl(\"U\", mana_cost)\n}\n\nis_color_b <- function(mana_cost) {\n  grepl(\"B\", mana_cost)\n}\n\n# LANDS ####\nis_land <- function(type) {\n  # mdfc cards that have a land in both card faces are included\n  grepl(\"Land\", type) & !grepl(\"(Creature)|(Instant)|(Sorcery)\", type)\n}\n\nis_color_land <- function(is_land, produced_mana) {\n  # Even though Fetchlands don't produce mana, they are considered color lands\n  is_land & (grepl(\"U|B\", produced_mana) | produced_mana == \"\")\n}\n\nis_land_u <- function(is_color_land, produced_mana) {\n  is_color_land & (grepl(\"U\", produced_mana) | produced_mana == \"\")\n}\n\nis_land_b <- function(is_color_land, produced_mana) {\n  is_color_land & (grepl(\"B\", produced_mana) | produced_mana == \"\")\n}\n\n# MDFC LANDS ####\nis_mdfc_land <- function(layout, type) {\n  # mdfc cards that have a land in both card faces are excluded\n  layout == \"modal_dfc\" & grepl(\"Land\", type) & grepl(\"(Creature)|(Instant)|(Sorcery)\", type)\n}\n\nis_mdfc_land_u <- function(is_mdfc_land, produced_mana) {\n  is_mdfc_land & grepl(\"U\", produced_mana)\n}\n\nis_mdfc_land_b <- function(is_mdfc_land, produced_mana) {\n  is_mdfc_land & grepl(\"B\", produced_mana)\n}\n\n# ---- End of utils-add_custom_attributes.R ----\n\n\n# ---- Start of utils.R ----\n\n#' @export\ndraw_seven <- function(decklist, fixed_cards = NULL){\n  if (is.null(fixed_cards)) {\n\n    decklist |>\n      dplyr::slice_sample(n = 7)\n\n  } else {\n    n_fixed_cards <- length(fixed_cards)\n    \n    hand <- decklist |>\n      dplyr::filter(!card_name_scryfall %in% fixed_cards) |>\n      dplyr::slice_sample(n = 7 - n_fixed_cards)\n    \n    hand |>\n      dplyr::bind_rows(decklist |> dplyr::filter(card_name_scryfall %in% fixed_cards))\n  }\n\n}\n\n#' @export\nget_hand <- function(decklist, cards){\n  decklist |>\n    dplyr::filter(card_name_scryfall %in% cards)\n}\n\n# ---- End of utils.R ----\n\n\n","type":"text"},{"name":"www/styles.css","content":".fixed-cards .selectize-input {\n  display: grid;\n}\n\n.left-and-full-width .tooltip-inner {\n    max-width: none;\n    text-align: left;\n}\n\n.full-width .tooltip-inner {\n    max-width: none;\n}\n","type":"text"}]
